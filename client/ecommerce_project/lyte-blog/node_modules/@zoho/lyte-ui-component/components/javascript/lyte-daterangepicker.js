/**
 * Renders a daterangepicker
 * @component lyte-daterangepicker
 * @version 1.0.0
 * @dependencies lyte-calendar,lyte-dropdown,lyte-moment
 * @methods onDateSelected,onNavigation
 * @utility revertToSelected,revertToToday
 */

Lyte.Component.register("lyte-daterangepicker", {
	data: function () {
		return {
			"monthHeader1": Lyte.attr("string", { "default": "Initializing.." }),
			"monthHeader2": Lyte.attr("string", { "default": "Initializing.." }),

			/**
						 * @componentProperty {string} ltPropCurrentDate
						 * @version 1.0.0
						 */
			"ltPropCurrentDate": Lyte.attr("string", { "default": '' }),
			/** 
			 * @typedef {
			 * MM/DD/YYYY |
			 * YYYY/MM/DD |
			 * MMM/DD/YYYY |
			 * MMM/YYYY/DD |
			 * DD/MMM/YYYY |
			 * YYYY/MMM/DD |
			 * DD/YYYY/MMM |
			 * YYYY/DD/MMM |
			 * MMMM/DD/YYYY |
			 * MMMM/YYYY/DD |
			 * DD/YYYY/MMMM |
			 * YYYY/DD/MMMM |
			 * DD/MMMM/YYYY |
			 * YYYY/MMMM/DD
			 * } dateFormat
			*/
			/**
						 * @componentProperty {dateFormat} ltPropFormat
						 * @version 1.0.0
						 * @default MM/DD/YYYY
						 */
			"ltPropFormat": Lyte.attr("string", { "default": "MM/DD/YYYY" }),
			/**
			 * @typedef {
			 * 'MMMM YYYY' |
			 * 'MMM YYYY' 
			 * } MonthHeaderFormat
			 */
			/**
						 * @componentProperty {MonthHeaderFormat} ltPropMonthHeaderFormat
						 * @version 1.0.0
						 * @default MMM YYYY
						 * @options MMMM YYYY,MMM YYYY
						 */
			"ltPropMonthHeaderFormat": Lyte.attr("string", { "default": "MMM YYYY" }),
			"shortMonthNames": Lyte.attr("array", { "default": ['Jan', 'Feb', 'Mar', 'Apr', 'short.may', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] }),
			'longMonthNames': Lyte.attr('array', {
				'default': [
					'January',
					'February',
					'March',
					'April',
					'May',
					'June',
					'July',
					'August',
					'September',
					'October',
					'November',
					'December'
				]
			}),

			/**
						 * @componentProperty {number} ltPropStartYear
						 * @version 1.0.0
						 * @default 1900
						 */
			"ltPropStartYear": Lyte.attr("number", { "default": 1900 }),

			/**
						 * @componentProperty {number} ltPropEndYear
						 * @version 1.0.0
						 * @default 2100
						 */
			"ltPropEndYear": Lyte.attr("number", { "default": 2100 }),

			/**
						 * @componentProperty {dateString} ltPropStartDate
						 * @version 1.0.0
						 */
			"ltPropStartDate": Lyte.attr("string", { "default": "" }),

			/**
						 * @componentProperty {dateString} ltPropEndDate
						 * @version 1.0.0
						 */
			"ltPropEndDate": Lyte.attr("string", { "default": "" }),

			/**
						 * @componentProperty {array} ltPropDisabledDates
						 * @version 1.0.0
						 * @default []
						 */
			"ltPropDisabledDates": Lyte.attr("array", { "default": [] }),

			/**
						 * @componentProperty {dateString} ltPropMinDate
						 * @version 1.0.0
						 */
			"ltPropMinDate": Lyte.attr("string", { "default": "" }),

			/**
						 * @componentProperty {dateString} ltPropMaxDate
						 * @version 1.0.0
						 */
			"ltPropMaxDate": Lyte.attr("string", { "default": "" }),

			/**
						 * @componentProperty {continuous|separate} ltPropSelectionType
						 * @version 2.0.0
						 * @default continuous
						 */
			"ltPropSelectionType": Lyte.attr("string", { "default": "continuous" }),

			/**
						 * @componentProperty {left|right} ltPropPosition
						 * @version 2.2.6
						 * @default left
						 */
			"ltPropPosition": Lyte.attr("string", { "default": "left" }),

			/**
						 * @componentProperty {dropdown|default} ltPropHeaderType
						 * @version 2.2.16
						 * @default dropdown
						 */
			"ltPropHeaderType": Lyte.attr("string", { "default": "dropdown" }),

			/**
						 * @componentProperty {boolean} ltPropFillRows
						 * @version 2.2.16
						 * @default false
						 * 
						 */
			"ltPropFillRows": Lyte.attr("boolean", { "default": false }),

			// "ltPropPreventClick" : Lyte.attr("boolean",{"default":true}),

			//local variables
			"years": Lyte.attr("array", { "default": [] }),
			"dateSelected": Lyte.attr("boolean", { "default": false }),
			"selectedDate1": Lyte.attr("string"),
			"selectedDate2": Lyte.attr("string"),
			"calViewDate1": Lyte.attr("object"),
			"calViewDate2": Lyte.attr("object"),
			"tempDate": Lyte.attr("string"),
			"monthNames": Lyte.attr("array"),
			"dateNode1": Lyte.attr("object"),
			"dateNode2": Lyte.attr("object"),
			"clickCount": Lyte.attr("number", { "default": 0 }),
			"convertedDates": Lyte.attr("array", { "default": [] }),
			"convert": Lyte.attr("number", { "default": 0 }),
			"internallyChanged": Lyte.attr("boolean", { "default": false }),
			"monthNames1": Lyte.attr("array"),
			"monthNames2": Lyte.attr("array"),
			"years1": Lyte.attr("array", { "default": [] }),
			"years2": Lyte.attr("array", { "default": [] }),
			"triggerInit": Lyte.attr("number", { "default": 0 }),
			"triggerDidconnect": Lyte.attr("number", { "default": 0 })
		}
	},


	didConnect : function(){
		this.isTimezone = $L.moment && $L.moment().getCurrentTimeZone();
	},


	toDate : function(){
		if( this.isTimezone ){
			return new Date( $L.moment().format( 'MM/DD/YYYY' ) );
		}
		return new Date();
	},	

	moment : function( arg1, arg2 ){
		return $L.moment( arg1, arg2, { ignore_timezone : this.isTimezone } );
	},


	/**
	 * The method is going to initialize the values based on which the daterangepicker will be rendered
	 *
	 */
	initFunc : function(){
		var year = [],
			self = this;
		if (!(this.addedUtil)) {
			this.$node.revertToSelected = function () {
				self.revertToSelected();
			};
			this.$node.revertToToday = function () {
				self.revertToToday();
			};
			this.$node.reset = function () {
				self.resetDrp();
			};
			this.addedUtil = true;
		}
		for (var i = this.getData("ltPropStartYear"); i <= this.getData("ltPropEndYear"); i++) {
			year.push(i);
		}
		if (this.getData('ltPropSelectionType') == "continuous") {
			this.setData("years", year);
		}
		if (this.getData('ltPropSelectionType') == "separate") {
			this.setData("years1", year);
			this.setData("years2", year);
		}
		var monthNames = [];
		// localeMonthString = [];
		if (this.getData('ltPropMonthHeaderFormat') === 'MMMM YYYY') {
			for (var i = 0; i < 12; i++) {
				// localeMonthString.push(_lyteUiUtils.i18n(this.getData('longMonthNames')[i]));
				monthNames.push(_lyteUiUtils.i18n(this.getData('longMonthNames')[i]));
			}
		}
		else {
			for (var i = 0; i < 12; i++) {
				// localeMonthString.push(_lyteUiUtils.i18n(this.getData('shortMonthNames')[i]));
				monthNames.push(_lyteUiUtils.i18n(this.getData('shortMonthNames')[i]));
			}
		}
		this.setData('monthNames', monthNames);
		if (this.getData('ltPropSelectionType') == "separate") {
			this.setData('monthNames1', monthNames);
			this.setData('monthNames2', monthNames);
		}
	}.observes('ltPropStartYear','ltPropEndYear','triggerInit').on('init'),

	/**
	 * The method is going to reset the daterangepicker component
	 *
	 */
	resetDrp : function(){
		this.setData('dateNode1', null);
		this.setData('dateNode2', null);
		this.setData('selectedDate1', '');
		this.setData('selectedDate2', '');
		this.checkAndRemoveSelectedDateClass('start');
		this.checkAndRemoveSelectedDateClass('end');
		if (this.getData('ltPropSelectionType') == 'separate') {
			this.restrictCalendarDates("cal2", this.getData('ltPropMinDate'), "min");
			this.restrictCalendarDates("cal1", this.getData('ltPropMaxDate'), "max");
			this.validateNavigation();
			var selected = this.$node.querySelectorAll('.lyteCalSel');
			if (selected.length > 0) {
				var selectedDate = new Date(selected[0].dataset.date);
				if (selectedDate.toString() === "Invalid Date") {
					if (!($L.moment)) {
						console.error("INCLUDE LYTE-MOMENT PLUGIN");
						return;
					}
					selectedDate = this.moment(selected[0].dataset.date, this.getData('ltPropFormat').toUpperCase()).getDObj();
				}
				for (var i = 0; i < selected.length; i++) {
					selected[0].classList.remove('lyteCalSel');
				}
			}
		}
	},
	revertToSelected: function () {
		this.setData('triggerDidconnect', this.getData('triggerDidconnect') + 1);
		if (this.getData('ltPropSelectionType') == "separate") {
			if (this.getData('ltPropStartDate')) {
				// this.checkAndRemoveSelectedDateClass("start");
				this.checkforStartDateAndEndDate(this.$node.querySelector('.dRPCalendar1'), this.getData('ltPropStartDate'), "start");
			}
			if (this.getData('ltPropEndDate')) {
				// this.checkAndRemoveSelectedDateClass("end");
				this.checkforStartDateAndEndDate(this.$node.querySelector('.dRPCalendar2'), this.getData('ltPropEndDate'), "end");
			}
		}
	},
	revertToToday: function () {
		var cal1 = this.$node.querySelector('.dRPCalendar1');
		var cal2 = this.$node.querySelector('.dRPCalendar2');
		var today = this.toDate();
		var dd = today.getDate();
		var mm = today.getMonth(); //January is 0!
		var yy = today.getFullYear();
		// this.setMonthAndYear(cal1,{dd:dd,mm:mm,yy:yy},"cal1");
		if (this.getData('ltPropSelectionType') == "continuous") {
			if (this.getData('ltPropPosition') == "right") {
				mm -= 1;
				if (mm < 0) {
					mm = 11;
					yy -= 1;
				}
				cal1.setData('selectDate', false);
				this.setMonthAndYear(cal1, { dd: 1, mm: mm, yy: yy }, "cal1");
				cal1.setData('selectDate', true);
			}
			else {
				this.setMonthAndYear(cal1, { dd: dd, mm: mm, yy: yy }, "cal1");
			}
			if (mm < 11) {
				mm += 1
			}
			else {
				mm = 0;
				yy += 1;
			}
			if (this.getData('ltPropPosition') == "right") {
				cal2.setData('selectDate', true);
				this.setMonthAndYear(cal2, { dd: dd, mm: mm, yy: yy }, "cal2");
				cal2.setData('selectDate', false);
			} else {
				this.setMonthAndYear(cal2, { dd: 1, mm: mm, yy: yy }, "cal2");
			}
			var selected = this.$node.querySelector('.lyteCalSel');
			if (selected) {
				var selectedDate = new Date(selected.dataset.date);
				if (selectedDate.toString() === "Invalid Date") {
					if (!($L.moment)) {
						console.error("INCLUDE LYTE-MOMENT PLUGIN");
						return;
					}
					selectedDate = this.moment(selected.dataset.date, this.getData('ltPropFormat').toUpperCase()).getDObj();
				}
				if (selectedDate.getMonth() === today.getMonth() && selectedDate.getDate() === today.getDate() && selectedDate.getFullYear() === today.getFullYear()) {
					selected.classList.remove('lyteCalSel');
					selected.classList.add('lyteCalToday');
				}
			}
		}
		else if (this.getData('ltPropSelectionType') == "separate") {
			this.setMonthAndYear(cal1, { dd: dd, mm: mm, yy: yy }, "cal1");
			var startDate = this.getData('ltPropStartDate') ? Date.parse(this.stringToDate(this.getData('ltPropStartDate'), this.getData('ltPropFormat'))) : null,
				endDate = this.getData('ltPropEndDate') ? Date.parse(this.stringToDate(this.getData('ltPropEndDate'), this.getData('ltPropFormat'))) : null,
				currentDate = Date.parse(today), dateObj;
			if (startDate && startDate > currentDate) {
				dateObj = this.stringToDate(this.getData('ltPropStartDate'), this.getData('ltPropFormat'));
				var dd = dateObj.getDate();
				var mm = dateObj.getMonth(); //January is 0!
				var yy = dateObj.getFullYear();
				this.setMonthAndYear(cal2, { dd: dd, mm: mm, yy: yy }, "cal2");
				this.restrictCalendarDates("cal2", this.getData('ltPropStartDate'), "min");
			}
			else if (endDate && endDate < currentDate) {
				dateObj = this.stringToDate(this.getData('ltPropEndDate'), this.getData('ltPropFormat'));
				var dd = dateObj.getDate();
				var mm = dateObj.getMonth(); //January is 0!
				var yy = dateObj.getFullYear();
				this.setMonthAndYear(cal1, { dd: dd, mm: mm, yy: yy }, "cal1");
				this.restrictCalendarDates("cal1", this.getData('ltPropEndDate'), "max");
			}
			else {
				this.setMonthAndYear(cal2, { dd: dd, mm: mm, yy: yy }, "cal2");
			}
			var selected = this.$node.querySelectorAll('.lyteCalSel');
			if (selected.length > 0) {
				var selectedDate = new Date(selected[0].dataset.date);
				if (selectedDate.toString() === "Invalid Date") {
					if (!($L.moment)) {
						console.error("INCLUDE LYTE-MOMENT PLUGIN");
						return;
					}
					selectedDate = this.moment(selected[0].dataset.date, this.getData('ltPropFormat').toUpperCase()).getDObj();
				}
				for (var i = 0; i < selected.length; i++) {
					if (selectedDate.getMonth() === today.getMonth() && selectedDate.getDate() === today.getDate() && selectedDate.getFullYear() === today.getFullYear()) {
						selected[0].classList.remove('lyteCalSel');
						selected[0].classList.add('lyteCalToday');
					}
				}
			}
			if (this.getData('ltPropStartDate')) {
				this.setData('selectedDate1', this.getData('ltPropStartDate'));
				this.checkforStartDateAndEndDate(this.$node.querySelector('.dRPCalendar1'), this.getData('ltPropStartDate'), "start");
			}
			if (this.getData('ltPropEndDate')) {
				this.setData('selectedDate2', this.getData('ltPropEndDate'));
				this.checkforStartDateAndEndDate(this.$node.querySelector('.dRPCalendar2'), this.getData('ltPropEndDate'), "end");
			}
			this.validateNavigationAndDropdown();
		}


		if (this.getData('ltPropDisabledDates').length > 0) {
			this.setData('convert', this.getData('convert') + 1);
		}
		if (this.getData('ltPropSelectionType') == "continuous" && this.getData('ltPropStartDate') && this.getData('ltPropEndDate')) {
			this.setData('selectedDate1', this.getData('ltPropStartDate'));
			this.setData('selectedDate2', this.getData('ltPropEndDate'));
			this.checkForSelectedDates(this.getData('ltPropStartDate'), this.getData('ltPropEndDate'));
		}
		this.setTodayClass();
	},

	setTodayClass : function(){
		var currentDate = this.toDate();
		if(this.getData('calViewDate1').getMonth() == currentDate.getMonth() && this.getData('calViewDate1').getFullYear() == currentDate.getFullYear()){
			var nodes = this.$node.querySelector('.dRPCalendar1').querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
			for(var i = 0; i<nodes.length; i++){
				var date = this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat'));
				if(currentDate.getDate() == date.getDate() && !(nodes[i].classList.contains('lyteDateRPFirstDateSelected') || nodes[i].classList.contains('lyteDateRPTempSelected') || nodes[i].classList.contains('lyteDateRPLastDateSelected'))){
					nodes[i].classList.add('lyteCalToday');
				}
			}
		}
		if(this.getData('calViewDate2').getMonth() == currentDate.getMonth() && this.getData('calViewDate2').getFullYear() == currentDate.getFullYear()){
			var nodes = this.$node.querySelector('.dRPCalendar2').querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
			for(var i = 0; i<nodes.length; i++){
				var date = this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat'));
				if(currentDate.getDate() == date.getDate() && !(nodes[i].classList.contains('lyteDateRPFirstDateSelected') || nodes[i].classList.contains('lyteDateRPTempSelected') || nodes[i].classList.contains('lyteDateRPLastDateSelected'))){
					nodes[i].classList.add('lyteCalToday');
				}
			}
		}
	},

	toggleSelectionType : function(){
		this.setData('triggerInit',this.getData('triggerInit') + 1);
		this.setData('triggerDidconnect',this.getData('triggerDidconnect') + 1);
	}.observes('ltPropSelectionType'),
	convertDisabledDates: function () {
		// var disabledDates = this.getData('ltPropDisabledDates');
		// var convertedDates = [];
		// for(var i = 0; i<disabledDates.length; i++){
		// 	convertedDates.push(Date.parse(disabledDates[i]));
		// }
		// this.setData('convertedDates',convertedDates);
		if (this.getData('ltPropDisabledDates').length > 0) {
			this.checkAndMarkDisabledDates();
		}
	}.observes("ltPropDisabledDates.[]","convert"),

	/**
	 * The method is going to set the months that will be shown in the daterangepicker
	 *
	 */
	setMonths : function(){
		var monthNames = [];
		// localeMonthString = "";
		if (this.getData('ltPropMonthHeaderFormat') === 'MMMM YYYY') {
			for (var i = 0; i < 12; i++) {
				// localeMonthString += _lyteUiUtils.i18n(this.getData('longMonthNames')[i]);
				monthNames.push(_lyteUiUtils.i18n(this.getData('longMonthNames')[i]));
			}
		}
		else {
			for (var i = 0; i < 12; i++) {
				// localeMonthString += _lyteUiUtils.i18n(this.getData('shortMonthNames')[i]);
				monthNames.push(_lyteUiUtils.i18n(this.getData('shortMonthNames')[i]));
			}
		}
		if (this.getData('ltPropSelectionType') == "continuous") {
			this.setData('monthNames', monthNames);
		}
		if (this.getData('ltPropSelectionType') == "separate") {
			this.setData('monthNames1', monthNames);
			this.setData('monthNames2', monthNames);
		}
	}.observes('ltPropMonthHeaderFormat'),
	setCalendarHeader: function (cal, comp, viewDate) {
		var dd = 1;
		var mm = viewDate.getMonth();
		var yy = viewDate.getFullYear();
		if (this.getData('ltPropSelectionType') == "continuous") {
			if (this.getData('ltPropHeaderType') == "dropdown") {
				comp.$node.querySelector('.monthDD').ltProp("selected", this.getData("monthNames")[mm]);
				comp.$node.querySelector('.yearDD').ltProp("selected", "" + yy);
			}
			else {
				if (cal == "cal1") {
					this.setData('monthHeader1', comp.getData('monthHeader'));
				}
				if (cal == "cal2") {
					this.setData('monthHeader2', comp.getData('monthHeader'))
				}
			}
		}
		if (this.getData('ltPropSelectionType') == "separate") {
			if (this.getData('ltPropHeaderType') == "dropdown") {
				if (cal == "cal1") {
					comp.$node.querySelector('.monthDD').ltProp("selected", this.getData("monthNames1")[mm]);
				}
				if (cal == "cal2") {
					comp.$node.querySelector('.monthDD').ltProp("selected", this.getData("monthNames2")[mm]);
				}
				comp.$node.querySelector('.yearDD').ltProp("selected", "" + yy);
			}
			else {
				if (cal == "cal1") {
					this.setData('monthHeader1', comp.getData('monthHeader'));
				}
				if (cal == "cal2") {
					this.setData('monthHeader2', comp.getData('monthHeader'))
				}
			}
		}
	},
	didConnectFunc: function () {
		var cal1 = this.$node.querySelector('.dRPCalendar1');
		var cal2 = this.$node.querySelector('.dRPCalendar2');
		var currentDate = this.toDate();
		var today = this.getData("ltPropCurrentDate") ? this.stringToDate(this.getData("ltPropCurrentDate"), this.getData('ltPropFormat')) : currentDate;
		if (this.getData('ltPropSelectionType') == "continuous" && this.getData('ltPropStartDate') && this.getData('ltPropEndDate')) {
			today = this.stringToDate(this.getData('ltPropStartDate'), this.getData('ltPropFormat'));
		}
		if (this.getData('ltPropSelectionType') == "separate" && this.getData('ltPropStartDate')) {
			today = this.stringToDate(this.getData('ltPropStartDate'), this.getData('ltPropFormat'));
			this.restrictCalendarDates("cal2", this.getData('ltPropStartDate'), "min");
		}
		var dd = today.getDate();
		var mm = today.getMonth(); //January is 0!
		var yy = today.getFullYear();
		// this.setMonthAndYear(cal1,{dd:dd,mm:mm,yy:yy},"cal1");
		if (this.getData('ltPropSelectionType') == "continuous") {
			if (this.getData('ltPropPosition') == "right") {
				mm -= 1;
				if (mm < 0) {
					mm = 11;
					yy -= 1;
				}
				cal1.setData('selectDate', false);
				this.setMonthAndYear(cal1, { dd: 1, mm: mm, yy: yy }, "cal1");
				cal1.setData('selectDate', true);
			}
			else {
				this.setMonthAndYear(cal1, { dd: dd, mm: mm, yy: yy }, "cal1");
			}
			if (mm < 11) {
				mm += 1
			}
			else {
				mm = 0;
				yy += 1;
			}
			if (this.getData('ltPropPosition') == "right") {
				cal2.setData('selectDate', true);
				this.setMonthAndYear(cal2, { dd: dd, mm: mm, yy: yy }, "cal2");
				cal2.setData('selectDate', false);
			} else {
				this.setMonthAndYear(cal2, { dd: 1, mm: mm, yy: yy }, "cal2");
			}
			// this.setMonthAndYear(cal2,{dd:1,mm:mm,yy:yy});
			var selected = this.$node.querySelector('.lyteCalSel');
			if (selected) {
				var selectedDate = new Date(selected.dataset.date);
				if (selectedDate.toString() === "Invalid Date") {
					if (!($L.moment)) {
						console.error("INCLUDE LYTE-MOMENT PLUGIN");
						return;
					}
					selectedDate = this.moment(selected.dataset.date, this.getData('ltPropFormat').toUpperCase()).getDObj();
				}
				if (selectedDate.getMonth() === currentDate.getMonth() && selectedDate.getDate() === currentDate.getDate() && selectedDate.getFullYear() === currentDate.getFullYear()) {
					selected.classList.remove('lyteCalSel');
					selected.classList.add('lyteCalToday');
				}
			}
		}
		else if (this.getData('ltPropSelectionType') == "separate") {
			this.setMonthAndYear(cal1, { dd: dd, mm: mm, yy: yy }, "cal1");
			if (this.getData('ltPropEndDate')) {
				today = this.stringToDate(this.getData('ltPropEndDate'), this.getData('ltPropFormat'));
				this.restrictCalendarDates("cal1", this.getData('ltPropEndDate'), "max");
				var dd = today.getDate();
				var mm = today.getMonth(); //January is 0!
				var yy = today.getFullYear();
			}
			this.setMonthAndYear(cal2, { dd: dd, mm: mm, yy: yy }, "cal2");
			var selected = this.$node.querySelectorAll('.lyteCalSel');
			if (selected.length > 0) {
				var selectedDate = new Date(selected[0].dataset.date);
				if (selectedDate.toString() === "Invalid Date") {
					if (!($L.moment)) {
						console.error("INCLUDE LYTE-MOMENT PLUGIN");
						return;
					}
					selectedDate = this.moment(selected[0].dataset.date, this.getData('ltPropFormat').toUpperCase()).getDObj();
				}
				for (var i = 0; i < selected.length; i++) {
					if (selectedDate.getMonth() === currentDate.getMonth() && selectedDate.getDate() === currentDate.getDate() && selectedDate.getFullYear() === currentDate.getFullYear()) {
						selected[0].classList.remove('lyteCalSel');
						selected[0].classList.add('lyteCalToday');
					}
				}
			}
			this.validateNavigationAndDropdown();
			this.setTodayClass();
		}


		if (this.getData('ltPropDisabledDates').length > 0) {
			this.setData('convert', this.getData('convert') + 1);
		}
		if (this.getData('ltPropSelectionType') == "continuous" && this.getData('ltPropStartDate') && this.getData('ltPropEndDate')) {
			this.setData('selectedDate1', this.getData('ltPropStartDate'));
			this.setData('selectedDate2', this.getData('ltPropEndDate'));
			this.checkForSelectedDates(this.getData('ltPropStartDate'), this.getData('ltPropEndDate'));
		}
	}.observes('ltPropCurrentDate', 'ltPropMinDate', 'ltPropMaxDate', 'triggerDidconnect').on('didConnect'),
	restrictCalendarDates: function (cal, date, cond) {
		var calendar;
		if (cal == "cal1") {
			calendar = this.$node.querySelector('.dRPCalendar1');
		}
		else if (cal == "cal2") {
			calendar = this.$node.querySelector('.dRPCalendar2');
		}
		if (cond === "min") {
			calendar.ltProp('minDate', date);
			var minDate = this.stringToDate(date, this.getData('ltPropFormat'));
			this.calculateYears(cal, typeof minDate == "object" ? minDate.getFullYear() : this.getData('ltPropStartYear'), this.getData('ltPropEndYear'));
		}
		else if(cond == "max"){
			calendar.ltProp('maxDate',date);
			var maxDate = this.stringToDate(date,this.getData('ltPropFormat'));
			this.calculateYears(cal,this.getData('ltPropStartYear'),typeof maxDate == "object" ? maxDate.getFullYear() : this.getData('ltPropEndYear'));
		}
	},
	calculateYears: function (cal, start, end) {
		var year = [];
		for (var i = start; i <= end; i++) {
			year.push(i);
		}
		if (cal == "cal1") {
			this.setData('years1', year);
		}
		if (cal == "cal2") {
			this.setData('years2', year);
		}
	},
	changeStartAndEndDate: function () {
		// console.log(this.getData('internallyChanged'));
		if (this.getData('ltPropSelectionType') == "separate") {
			if (this.getData('ltPropStartDate')) {
				this.restrictCalendarDates("cal2", this.getData('ltPropStartDate'), "min");
			}
			if (this.getData('ltPropEndDate')) {
				this.restrictCalendarDates("cal1", this.getData('ltPropEndDate'), "max");
			}
			if (this.getData('ltPropStartDate')) {
				this.checkAndRemoveSelectedDateClass("start");
				this.checkforStartDateAndEndDate(this.$node.querySelector('.dRPCalendar1'), this.getData('ltPropStartDate'), "start");
			}
			if (this.getData('ltPropEndDate')) {
				this.checkAndRemoveSelectedDateClass("end");
				this.checkforStartDateAndEndDate(this.$node.querySelector('.dRPCalendar2'), this.getData('ltPropEndDate'), "end");
			}
		}
		else if (this.getData('ltPropSelectionType') == "continuous") {
			if (!this.getData('internallyChanged')) {
				if (this.getData('dateSelected')) {
					this.setData('dateSelected', false);
				}
				if (this.getData('tempDate')) {
					this.setData('tempDate', '');
				}
				// if(this.getData('ltPropStartDate') === "" || this.getData('ltPropEndDate') === ""){
				this.checkAndRemoveAllSelectedClasses();
				this.removeMonthEndAndStart();
				// }
				if (this.getData('ltPropStartDate') && this.getData('ltPropEndDate')) {
					this.setData('selectedDate1', this.getData('ltPropStartDate'));
					this.setData('selectedDate2', this.getData('ltPropEndDate'));
					this.checkForSelectedDates(this.getData('ltPropStartDate'), this.getData('ltPropEndDate'));
				}
			}
			else {
				this.setData('internallyChanged', false);
			}
		}
		if (!this.getData('ltPropStartDate') && !this.getData('ltPropEndDate')) {
			this.resetDrp();
		}
	}.observes('ltPropStartDate', 'ltPropEndDate'),
	checkforStartDateAndEndDate: function (cal, date, cond) {
		var nodes = cal.querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
		for (var i = 0; i < nodes.length; i++) {
			if (nodes[i].dataset.date == date) {
				if (cond == "start") {
					nodes[i].classList.add('lyteDateRPFirstDateSelected');
					this.setData('dateNode1', nodes[i]);
				}
				if (cond == "end") {
					nodes[i].classList.add('lyteDateRPLastDateSelected');
					this.setData('dateNode2', nodes[i]);
				}
				return;
			}
		}
	},
	checkAndRemoveSelectedDateClass: function (cond) {
		if (cond == "start") {
			var calendar = this.$node.querySelector('.dRPCalendar1');
			var nodes = Array.from(calendar.querySelectorAll(".lyteDateRPFirstDateSelected"));
			Lyte.arrayUtils(nodes, "push", Array.from(this.$node.querySelectorAll(".lyteCalToday")));
			Lyte.arrayUtils(nodes, "push", Array.from(this.$node.querySelectorAll(".lyteCalSel")));
			if (nodes.length > 0) {
				for (var i = 0; i < nodes.length; i++) {
					nodes[i].classList.remove("lyteDateRPFirstDateSelected", "lyteCalToday", "lyteCalSel");
				}
			}
		}
		if (cond == "end") {
			var calendar = this.$node.querySelector('.dRPCalendar2');
			var nodes = Array.from(calendar.querySelectorAll(".lyteDateRPLastDateSelected"));
			Lyte.arrayUtils(nodes, "push", Array.from(this.$node.querySelectorAll(".lyteCalToday")));
			Lyte.arrayUtils(nodes, "push", Array.from(this.$node.querySelectorAll(".lyteCalSel")));
			if (nodes.length > 0) {
				for (var i = 0; i < nodes.length; i++) {
					nodes[i].classList.remove("lyteDateRPLastDateSelected", "lyteCalToday", "lyteCalSel");
				}
			}
		}
	},

	/**
	 * The method is going to validate and change the month shown in the daterangepicker
	 *
	 */
	validateNavigation : function(){
		if(this.getData('ltPropStartYear') || this.getData('ltPropEndYear')){
			if(this.getData('ltPropSelectionType') == 'continuous'){
				if(this.getData('ltPropStartYear')){
					var date = this.getData('calViewDate1');
					var node = this.$node.querySelector('.lyteDateRangePickerCol1 .lyteDateRPLeftNav');
					if (date.getMonth() == 0 && date.getFullYear() == this.getData('ltPropStartYear')) {
						node.classList.add('lyteDateRPNavDisabled');
					}
					else {
						node.classList.remove('lyteDateRPNavDisabled');
					}
				}
				if (this.getData('ltPropEndYear')) {
					var date = this.getData('calViewDate2');
					var node = this.$node.querySelector('.lyteDateRangePickerCol2 .lyteDateRPRightNav');
					if (date.getMonth() == 11 && date.getFullYear() == this.getData('ltPropEndYear')) {
						node.classList.add('lyteDateRPNavDisabled');
					}
					else {
						node.classList.remove('lyteDateRPNavDisabled');
					}
				}
			}
			if (this.getData('ltPropSelectionType') == 'separate') {
				var date1 = this.getData('calViewDate1');
				var date2 = this.getData('calViewDate2');
				if (this.getData('ltPropStartYear')) {
					var node1 = this.$node.querySelector('.lyteDateRangePickerCol1 .lyteDateRPLeftNav');
					var node2 = this.$node.querySelector('.lyteDateRangePickerCol2 .lyteDateRPLeftNav');
					if (date1.getMonth() == 0 && date1.getFullYear() == this.getData('ltPropStartYear')) {
						node1.classList.add('lyteDateRPNavDisabled');
					}
					else {
						node1.classList.remove('lyteDateRPNavDisabled');
					}
					if (date2.getMonth() == 0 && date2.getFullYear() == this.getData('ltPropStartYear')) {
						node2.classList.add('lyteDateRPNavDisabled');
					}
					else {
						node2.classList.remove('lyteDateRPNavDisabled');
					}
				}
				if (this.getData('ltPropEndYear')) {
					var node1 = this.$node.querySelector('.lyteDateRangePickerCol1 .lyteDateRPRightNav');
					var node2 = this.$node.querySelector('.lyteDateRangePickerCol2 .lyteDateRPRightNav');
					if (date1.getMonth() == 11 && date1.getFullYear() == this.getData('ltPropEndYear')) {
						node1.classList.add('lyteDateRPNavDisabled');
					}
					else {
						node1.classList.remove('lyteDateRPNavDisabled');
					}
					if (date2.getMonth() == 11 && date2.getFullYear() == this.getData('ltPropEndYear')) {
						node2.classList.add('lyteDateRPNavDisabled');
					}
					else {
						node2.classList.remove('lyteDateRPNavDisabled');
					}
				}
			}
		}
	},

	/**
	 * The method is going to validate and change the month shown in the daterangepicker and also change the dropdown values
	 *
	 */
	validateNavigationAndDropdown : function(){
		this.validateNavigation();
		if (this.getData('ltPropStartDate')) {
			var date1 = this.stringToDate(this.getData('ltPropStartDate'), this.getData('ltPropFormat'));
			var date2 = this.getData('calViewDate2');
			var node = this.$node.querySelector('.lyteDateRangePickerCol2 .lyteDateRPLeftNav');
			if (date1.getMonth() == date2.getMonth() && date1.getFullYear() == date2.getFullYear()) {
				node.classList.add('lyteDateRPNavDisabled');
			}
			else {
				node.classList.remove('lyteDateRPNavDisabled');
			}
			if (date1.getFullYear() === date2.getFullYear()) {
				var monthNames = this.getData('monthNames2');
				var index = monthNames.indexOf(this.getData('monthNames')[date1.getMonth()]);
				if (index == -1 || index != 0) {
					this.calculateMonths('cal2', date1.getMonth());
				}
			}
			else {
				if (this.getData('monthNames2').length < 12) {
					this.setData('monthNames2', this.getData('monthNames'));
				}
			}

		}
		if (this.getData('ltPropEndDate')) {
			var date1 = this.stringToDate(this.getData('ltPropEndDate'), this.getData('ltPropFormat'));
			var date2 = this.getData('calViewDate1');
			var node = this.$node.querySelector('.lyteDateRangePickerCol1 .lyteDateRPRightNav');
			if (date1.getMonth() == date2.getMonth() && date1.getFullYear() == date2.getFullYear()) {
				node.classList.add('lyteDateRPNavDisabled');
			}
			else {
				node.classList.remove('lyteDateRPNavDisabled');
			}
			if (date1.getFullYear() === date2.getFullYear()) {
				var monthNames = this.getData('monthNames1');
				var index = monthNames.indexOf(this.getData('monthNames')[date1.getMonth()]);
				if (index == -1 || index != monthNames.length - 1) {
					this.calculateMonths('cal1', date1.getMonth());
				}
			}
			else {
				if (this.getData('monthNames1').length < 12) {
					this.setData('monthNames1', this.getData('monthNames'));
				}
			}
		}
	},
	calculateMonths: function (cal, limit) {
		if (cal == "cal1") {
			var monthNames = this.getData('monthNames');
			this.setData('monthNames1', monthNames.slice(0, limit + 1));
		}
		if (cal == "cal2") {
			var monthNames = this.getData('monthNames');
			this.setData('monthNames2', monthNames.slice(limit));
		}
	},
	setMonthAndYear: function (cal, date, view) {
		cal.ltProp("currentDate", this.constructDateString(date.mm + 1, date.dd, date.yy));
		cal.setData('currentDatechanged', cal.getData('currentDatechanged') + 1);
		if (this.getData('ltPropSelectionType') == "separate") {
			if (view == "cal1" && this.getData('monthNames1').indexOf(this.getData("monthNames")[date.mm]) == -1) {
				this.setData("monthNames1", this.getData('monthNames'));
			}
			if (view == "cal2" && this.getData('monthNames2').indexOf(this.getData("monthNames")[date.mm]) == -1) {
				this.setData("monthNames2", this.getData('monthNames'));
			}
		}
		if (this.getData('ltPropHeaderType') == "dropdown") {
			cal.querySelector('.monthDD').ltProp("selected", this.getData("monthNames")[date.mm]);
			cal.querySelector('.yearDD').ltProp("selected", "" + date.yy);
		}
		else {
			if (cal.classList.contains('dRPCalendar1')) {
				this.setData('monthHeader1', cal.getData('monthHeader'));
			}
			if (cal.classList.contains('dRPCalendar2')) {
				this.setData('monthHeader2', cal.getData('monthHeader'));
			}
		}
		if (view == "cal1") {
			this.setData('calViewDate1', cal.getData('viewDate'));
		}
		else {
			this.setData('calViewDate2', cal.getData('viewDate'));
		}
	},
	selectDates: function (targetDate) {
		var nodes = this.$node.querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
		var initNode = this.getData('dateNode1');
		var target = this.getData('dateNode2');
		var date1 = Date.parse(this.stringToDate(this.getData('selectedDate1'), this.getData('ltPropFormat')) /*this.getData('selectedDate1')*/);
		var date2 = Date.parse(this.stringToDate(targetDate, this.getData('ltPropFormat')) /*targetDate*/);
		var node1 = this.$node.querySelector('.lyteDateRPTempFirstDateSelected');
		var node2 = this.$node.querySelector('.lyteDateRPTempLastDateSelected');
		if (node1) {
			node1.classList.remove('lyteDateRPTempFirstDateSelected');
		}
		if (node2) {
			node2.classList.remove('lyteDateRPTempLastDateSelected');
		}
		this.removeMonthEndAndStart();
		if (date1 < date2) {
			for (var i = 0; i < nodes.length; i++) {
				var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
				if (date >= date1 && date <= date2) {
					if (nodes[i].classList.contains("lyteCalDisabled")) {
						this.checkForBeforeAndAfter(nodes, i, date1, date2);
					}
					else {
						if (date == date1) {
							initNode.classList.add('lyteDateRPTempFirstDateSelected');
						}
						else if (date == date2) {
							target.classList.add('lyteDateRPTempLastDateSelected');
						}
						else {
							if (!nodes[i].classList.contains("lyteDateRPTempSelected")) {
								nodes[i].classList.add("lyteDateRPTempSelected");
							}
						}
						this.checkForMonthEndAndStart(nodes, i, this.getData('selectedDate1'), targetDate);
					}
				}
				else {
					if (nodes[i].classList.contains("lyteDateRPTempSelected") || nodes[i].classList.contains("lyteCalSel")) {
						nodes[i].classList.remove("lyteDateRPTempSelected", 'lyteCalSel');
					}
				}
			}
		}
		else if (date1 > date2) {
			for (var i = 0; i < nodes.length; i++) {
				var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
				if (date >= date2 && date <= date1) {
					if (nodes[i].classList.contains("lyteCalDisabled")) {
						this.checkForBeforeAndAfter(nodes, i, date2, date1);
					}
					else {
						if (date == date2) {
							target.classList.add('lyteDateRPTempFirstDateSelected');
						}
						else if (date == date1) {
							initNode.classList.add('lyteDateRPTempLastDateSelected');
						}
						else {
							if (!nodes[i].classList.contains("lyteDateRPTempSelected")) {
								nodes[i].classList.add("lyteDateRPTempSelected");
							}
						}
						this.checkForMonthEndAndStart(nodes, i, targetDate, this.getData('selectedDate1'));
					}
				}
				else {
					if (nodes[i].classList.contains("lyteDateRPTempSelected") || nodes[i].classList.contains("lyteCalSel")) {
						nodes[i].classList.remove("lyteDateRPTempSelected", "lyteCalSel");
					}
				}
			}
		}
		else {
			this.checkAndRemoveAllSelectedClasses();
			this.setData('selectedDate1', targetDate)
			target.classList.add('lyteDateRPTempFirstDateSelected', 'lyteDateRPTempLastDateSelected');
			this.checkForMonthEndAndStart(nodes, Array.from(nodes).indexOf(target), targetDate, this.getData('selectedDate1'));
		}
		this.setData("tempDate", targetDate);

	},
	checkAndMarkDisabledDates: function () {
		var nodes = this.$node.querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
		if (nodes.length == 0) {
			return
		}
		var date;
		for (var j = 0; j < nodes.length; j++) {
			date = nodes[j].dataset.date;
			if (this.checkForDisabledDates(date)) {
				nodes[j].classList.add("lyteCalDisabled");
			}
		}
	},
	checkForDisabledDates: function (date) {
		var disabledDates = this.getData('ltPropDisabledDates');
		for (var i = 0; i < disabledDates.length; i++) {
			if (new RegExp(disabledDates[i]).test(date)) {
				return true;
			}
		}
		return false;
	},
	checkForBeforeAndAfter: function (nodes, pos, startDate, endDate) {
		if (pos > 0 && pos < nodes.length - 1) {
			var date1 = Date.parse(this.stringToDate(nodes[pos - 1].dataset.date, this.getData('ltPropFormat')) /*nodes[pos-1].dataset.date*/);
			var date2 = Date.parse(this.stringToDate(nodes[pos + 1].dataset.date, this.getData('ltPropFormat')) /*nodes[pos+1].dataset.date*/);
			if (date1 >= startDate && date1 <= endDate) {
				nodes[pos - 1].classList.add('lyteDateRPInterimEndDate');
			}
			if (date2 >= startDate && date2 <= endDate) {
				nodes[pos + 1].classList.add('lyteDateRPInterimStartDate');
			}
		}
	},
	checkAndRemoveAllSelectedClasses: function () {
		var nodes = Array.from(this.$node.querySelectorAll(".lyteDateRPFirstDateSelected"));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteDateRPLastDateSelected"))));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteDateRPTempLastDateSelected"))));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteDateRPTempFirstDateSelected"))));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteDateRPTempSelected"))));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteCalSel"))));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteCalToday"))));
		for (var i = 0; i < nodes.length; i++) {
			nodes[i].classList.remove("lyteDateRPFirstDateSelected", "lyteDateRPTempSelected", "lyteDateRPLastDateSelected", "lyteDateRPTempFirstDateSelected", "lyteDateRPTempLastDateSelected", "lyteCalSel", "lyteCalToday");
		}
		this.setData("selectedDate1", "");
		this.setData("selectedDate2", "");
	},
	checkForMonthEndAndStart: function (nodes, pos, startDate, endDate) {
		var allNodes = this.$node.querySelectorAll('.lyteCalCdate');
		var lastNode = allNodes[allNodes.length - 1];
		if (/*nodes[pos].innerText === "1"*/ this.isFirstDayOfTheMonth(nodes[pos]) && Date.parse(this.stringToDate(nodes[pos].dataset.date, this.getData('ltPropFormat')) /*nodes[pos].dataset.date*/) >= Date.parse(this.stringToDate(startDate, this.getData('ltPropFormat')) /*startDate*/) && Date.parse(this.stringToDate(nodes[pos].dataset.date, this.getData('ltPropFormat')) /*nodes[pos].dataset.date*/) <= Date.parse(this.stringToDate(endDate, this.getData('ltPropFormat')) /*endDate*/)) {
			nodes[pos].classList.remove('lyteDateRPTempSelected');
			nodes[pos].classList.add('lyteDateRPMonthStartDate');
		}
		else if (/*(pos + 1 < nodes.length && nodes[pos + 1].innerText === "1" && Date.parse(this.stringToDate(nodes[pos + 1].dataset.date, this.getData('ltPropFormat'))) >= Date.parse(this.stringToDate(startDate, this.getData('ltPropFormat'))) &&  Date.parse(this.stringToDate(nodes[pos].dataset.date, this.getData('ltPropFormat'))) <= Date.parse(this.stringToDate(endDate, this.getData('ltPropFormat')))) || */
			(/*pos == nodes.length - 1 && nodes[pos].isEqualNode(lastNode)*/ this.isLastDayOfTheMonth(nodes[pos]) && Date.parse(this.stringToDate(nodes[pos].dataset.date, this.getData('ltPropFormat')) /*nodes[pos].dataset.date*/) >= Date.parse(this.stringToDate(startDate, this.getData('ltPropFormat')) /*startDate*/) && Date.parse(this.stringToDate(nodes[pos].dataset.date, this.getData('ltPropFormat')) /*nodes[pos].dataset.date*/) <= Date.parse(this.stringToDate(endDate, this.getData('ltPropFormat')) /*endDate*/))) {
			nodes[pos].classList.remove('lyteDateRPTempSelected');
			nodes[pos].classList.add('lyteDateRPMonthEndDate');
		}
	},
	isFirstDayOfTheMonth: function (node) {
		return node.innerText.trim() === "1";
	},
	isLastDayOfTheMonth: function (node) {
		var calendar = node.closest('lyte-calendar');
		var viewDate = calendar.getData('viewDate');
		var month_31 = [0, 2, 4, 6, 7, 9, 11];
		var month_30 = [3, 5, 8, 10];
		if (month_31.indexOf(viewDate.getMonth()) != -1) {
			return node.innerText.trim() === "31";
		}
		else if (month_30.indexOf(viewDate.getMonth()) != -1) {
			return node.innerText.trim() === "30";
		}
		else {
			var year = viewDate.getFullYear();
			if (this.isLeapYear(year)) {
				return node.innerText.trim() === "29";
			}
			else {
				return node.innerText.trim() === "28";
			}
		}
	},
	isLeapYear: function (year) {
		return year % 100 === 0 ? year % 400 === 0 : year % 4 === 0;
	},
	removeMonthEndAndStart: function () {
		var nodes = Array.from(this.$node.querySelectorAll('.lyteDateRPMonthStartDate'));
		Lyte.arrayUtils(nodes, "push", (Array.from(this.$node.querySelectorAll(".lyteDateRPMonthEndDate"))));
		for (var i = 0; i < nodes.length; i++) {
			nodes[i].classList.remove("lyteDateRPMonthStartDate", "lyteDateRPMonthEndDate");
		}
	},
	executeSelected: function (event) {
		if (this.getMethods('onDateSelected')) {
			var date1 = Date.parse(this.stringToDate(this.getData('selectedDate1'), this.getData('ltPropFormat')) /*this.getData('selectedDate1')*/);
			var date2 = Date.parse(this.stringToDate(this.getData('selectedDate2'), this.getData('ltPropFormat')) /*this.getData('selectedDate2')*/);
			if (date1 <= date2) {
				if (this.getData('ltPropSelectionType') == "continuous") {
					this.setData('internallyChanged', true);
					this.setData('ltPropStartDate', this.getData('selectedDate1'));
					this.setData('internallyChanged', true);
					this.setData('ltPropEndDate', this.getData('selectedDate2'));
				}
				this.executeMethod('onDateSelected', event, this.getData('selectedDate1'), this.getData('selectedDate2'), this);
			}
			else {
				if (this.getData('ltPropSelectionType') == "continuous") {
					this.setData('internallyChanged', true);
					this.setData('ltPropStartDate', this.getData('selectedDate2'));
					this.setData('internallyChanged', true);
					this.setData('ltPropEndDate', this.getData('selectedDate1'));
				}
				this.executeMethod('onDateSelected', event, this.getData('selectedDate2'), this.getData('selectedDate1'), this);
			}
		}
	},
	checkForSelectedDates: function (startDate, endDate) {
		var nodes = this.$node.querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
		if (startDate && endDate) {
			var date1 = Date.parse(this.stringToDate(startDate, this.getData('ltPropFormat')) /*startDate*/);
			var date2 = Date.parse(this.stringToDate(endDate, this.getData('ltPropFormat')) /*endDate*/);
			for (var i = 0; i < nodes.length; i++) {
				var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
				if (date >= date1 && date <= date2) {
					if (nodes[i].classList.contains('lyteCalDisabled')) {
						this.checkForBeforeAndAfter(nodes, i, date1, date2);
					}
					else {
						if (date == date1) {
							nodes[i].classList.add('lyteDateRPFirstDateSelected');
						}
						if (date == date2) {
							nodes[i].classList.add('lyteDateRPLastDateSelected');
						}
						if (date !== date1 && date !== date2) {
							nodes[i].classList.add('lyteDateRPTempSelected');
						}
						this.checkForMonthEndAndStart(nodes, i, startDate, endDate);
					}
				}
			}
		}
		else {
			if (this.getData('ltPropDisabledDates').length > 0) {
				this.checkAndMarkDisabledDates();
			}
			var date1 = this.getData("selectedDate1");
			var date2 = this.getData("selectedDate2");
			var date3 = this.getData("tempDate");
			if (date1 && date2) {
				// this.removeMonthEndAndStart();
				date1 = Date.parse(this.stringToDate(date1, this.getData('ltPropFormat')) /*date1*/);
				date2 = Date.parse(this.stringToDate(date2, this.getData('ltPropFormat')) /*date2*/);
				if (date1 < date2) {
					for (var i = 0; i < nodes.length; i++) {
						var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
						if (date >= date1 && date <= date2) {
							if (nodes[i].classList.contains('lyteCalDisabled')) {
								this.checkForBeforeAndAfter(nodes, i, date1, date2);
							}
							else {
								if (date == date1) {
									nodes[i].classList.add('lyteDateRPFirstDateSelected');
								}
								if (date == date2) {
									nodes[i].classList.add('lyteDateRPLastDateSelected');
								}
								if (date !== date1 && date !== date2) {
									nodes[i].classList.add('lyteDateRPTempSelected');
								}
								this.checkForMonthEndAndStart(nodes, i, this.getData("selectedDate1"), this.getData("selectedDate2"));
							}
						}
					}
				}
				else {
					for (var i = 0; i < nodes.length; i++) {
						var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
						if (date >= date2 && date <= date1) {
							if (nodes[i].classList.contains('lyteCalDisabled')) {
								this.checkForBeforeAndAfter(nodes, i, date2, date1);
							}
							else {
								if (date == date2) {
									nodes[i].classList.add('lyteDateRPFirstDateSelected');
								}
								if (date == date1) {
									nodes[i].classList.add('lyteDateRPLastDateSelected');
								}
								if (date !== date1 && date !== date2) {
									nodes[i].classList.add('lyteDateRPTempSelected');
								}
								this.checkForMonthEndAndStart(nodes, i, this.getData("selectedDate2"), this.getData("selectedDate1"));
							}
						}
					}
				}
			}
			else if (date1 && date3) {
				date1 = Date.parse(this.stringToDate(date1, this.getData('ltPropFormat')) /*date1*/);
				date3 = Date.parse(this.stringToDate(date3, this.getData('ltPropFormat')) /*date3*/);
				if (date1 < date3) {
					for (var i = 0; i < nodes.length; i++) {
						var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
						if (nodes[i].classList.contains('lyteCalDisabled')) {
							this.checkForBeforeAndAfter(nodes, i, date1, date3);
						}
						else {
							if (date1 <= date3 && date == date1) {
								nodes[i].classList.add('lyteDateRPTempFirstDateSelected');
							}
							else if (date == date3) {
								nodes[i].classList.add('lyteDateRPTempLastDateSelected');
							}
							else if (date > date1 && date < date3) {
								nodes[i].classList.add('lyteDateRPTempSelected');
							}
						}
					}
				}
				else {
					for (var i = 0; i < nodes.length; i++) {
						var date = Date.parse(this.stringToDate(nodes[i].dataset.date, this.getData('ltPropFormat')) /*nodes[i].dataset.date*/);
						if (nodes[i].classList.contains('lyteCalDisabled')) {
							this.checkForBeforeAndAfter(nodes, i, date3, date1);
						}
						else {
							if (date3 <= date1 && date == date1) {
								nodes[i].classList.add('lyteDateRPTempFirstDateSelected');
							}
							else if (date == date1) {
								nodes[i].classList.add('lyteDateRPTempLastDateSelected');
							}
							else if (date >= date2 && date < date1) {
								nodes[i].classList.add('lyteDateRPTempSelected');
							}
						}
					}
				}
			}
		}
	},
	callOnNavigate : function(event,fromMonths,toMonths,comp,cal){
		this.setTodayClass();
		if(this.getMethods('onNavigation')){
			this.executeMethod('onNavigation',event,fromMonths,toMonths,this,cal);
		}
	},

	/** 
	 * get proper month from user defined value
	 * @param {String} mon - The current month
	 *
	 */

	getProperMonth: function (val) {
		var sm = {
			'jan': 1,
			'feb': 2,
			'mar': 3,
			'apr': 4,
			'may': 5,
			'jun': 6,
			'jul': 7,
			'aug': 8,
			'sep': 9,
			'oct': 10,
			'nov': 11,
			'dec': 12
		}, lg = {
			'january': 1,
			'february': 2,
			'march': 3,
			'april': 4,
			'may': 5,
			'june': 6,
			'july': 7,
			'august': 8,
			'september': 9,
			'october': 10,
			'november': 11,
			'december': 12
		}, ret

		val = val.toLowerCase();
		ret = sm[val] || lg[val];

		if (!ret && ret !== 0) {
			return parseFloat(val) - 1;
		}

		return ret - 1;
	},

	/**
	 * Convert the string to date object based on the format
	 * @param {String} cur - The current date of the user passed
	 * @param {String} format - The format of the dates
	 *
	 */

	stringToDate: function (cur, format) {

		try {
			var vals = cur.match(/([\da-z]+)/ig),
				format = format.toUpperCase(),
				sep = format.match(/([a-z]+)/ig),
				date = this.toDate(), i = 0, order = ['Y', 'M', 'D'];
			date.setDate(1);  //initialize the day to be 1 to avoid error for eg: 30 Feb if passed will generate 1 Mar as result.

			if (vals.length !== 3) {
				return 'Invalid Date';
			}

			while (i < sep.length) {
				var ind = this.getOrderIndex(sep, order[i]);
				if (i == 0) {
					date.setFullYear(vals[ind]);
				}
				else if (i == 1) {
					date.setMonth(this.getProperMonth(vals[ind]));
				}
				else if (i == 2) {
					date.setDate(vals[ind]);
				}

				if (date.toString() === 'Invalid Date') {
					return date.toString();
				}
				i++;
			}

			return date;
		}
		catch (e) {
			return 'Invalid Date';
		}


	},

	getOrderIndex: function (objArr, match) {
		for (var i = 0; i < objArr.length; i++) {
			if (objArr[i].charAt(0) === match) {
				return i;
			}
		}
		return -1;
	},

	/**
	 * The method is going to return the date as string based on the format
	 * @param {number} mm - month value
	 * @param {number} dd - day value
	 * @param {number} yy - year value
	 *
	 */
	constructDateString : function (mm,dd,yy) {
		var format = this.getData('ltPropFormat'),
			formatArr,
			date = '',
			sep;
		if ($L.moment) {
			var dateObj = new Date(mm + "/" + dd + "/" + yy);
			date = this.moment(dateObj).format(format.toUpperCase());
			return date;
		}
		if (format.indexOf('/') == -1) {
			if (!($L.moment)) {
				console.error("INCLUDE LYTE-MOMENT PLUGIN");
				return;
			}
			var dateObj = new Date(mm + "/" + dd + "/" + yy);
			date = this.moment(dateObj).format(format.toUpperCase());
			return date;
		}
		else {
			formatArr = format.split("/");
			sep = '/';
		}
		// if(format.indexOf('/') != -1){
		// 	formatArr = format.split("/"); 
		// 	sep = '/';
		// }
		if (formatArr.length != 3) {
			return "Invalid Format";
		}
		for (var i = 0; i < 3; i++) {
			if (formatArr[i].toUpperCase().charAt(0) === "M") {
				date += mm;
				if (i != 2) {
					date += sep;
				}
			}
			else if (formatArr[i].toUpperCase().charAt(0) === "D") {
				date += dd;
				if (i != 2) {
					date += sep;
				}
			}
			else if (formatArr[i].toUpperCase().charAt(0) === "Y") {
				date += yy;
				if (i != 2) {
					date += sep;
				}
			}
		}
		return date;
	},

	actions: {
		previous: function (opt, event) {
			var calendar = this.$node.querySelector('.dRPCalendar1');
			var fromMonths = {
				"date1": this.getData('monthNames')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear(),
				"date2": this.getData('monthNames')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear()
			};
			calendar.setData('selectDate', false);
			var dd = 1;
			var mm;
			var yy;
			if (opt == 'M') {
				mm = calendar.getData('viewDate').getMonth() - 1;
			}
			else {
				mm = calendar.getData('viewDate').getMonth();
			}
			if (opt == 'Y') {
				yy = calendar.getData('viewDate').getFullYear() - 1;
			}
			else {
				yy = calendar.getData('viewDate').getFullYear();
			}
			if (mm == -1) {
				mm = 11;
				yy -= 1;
			}
			if (yy < this.getData("ltPropStartYear")) {
				return;
			}
			this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, "cal1");
			if (mm < 11) {
				mm += 1;
			}
			else {
				mm = 0;
				yy += 1;
			}
			this.setMonthAndYear(this.$node.querySelector('.dRPCalendar2'), { dd: dd, mm: mm, yy: yy }, "cal2");
			this.checkForSelectedDates();
			var toMonths = {
				"date1": this.getData('monthNames')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear(),
				"date2": this.getData('monthNames')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear()
			};
			this.validateNavigation();
			this.callOnNavigate(event, fromMonths, toMonths, this);
		},
		next: function (opt, event) {
			var calendar = this.$node.querySelector('.dRPCalendar2');
			calendar.setData('selectDate', false);
			var fromMonths = {
				"date1": this.getData('monthNames')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear(),
				"date2": this.getData('monthNames')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear()
			};
			var dd = 1;
			var mm;
			var yy;
			if (opt == 'M') {
				mm = calendar.getData('viewDate').getMonth() + 1;
			}
			else {
				mm = calendar.getData('viewDate').getMonth();
			}
			if (opt == 'Y') {
				yy = calendar.getData('viewDate').getFullYear() + 1;
			}
			else {
				yy = calendar.getData('viewDate').getFullYear();
			}
			if (mm == 12) {
				mm = 0;
				yy += 1;
			}
			if (yy > this.getData('ltPropEndYear')) {
				return;
			}
			this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, "cal2");
			if (mm > 0) {
				mm -= 1;
			}
			else {
				mm = 11;
				yy -= 1;
			}
			this.$node.querySelector('.dRPCalendar1').setData('selectDate', false);
			this.setMonthAndYear(this.$node.querySelector('.dRPCalendar1'), { dd: dd, mm: mm, yy: yy }, "cal1");
			this.checkForSelectedDates();
			var toMonths = {
				"date1": this.getData('monthNames')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear(),
				"date2": this.getData('monthNames')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear()
			};
			this.validateNavigation();
			this.callOnNavigate(event, fromMonths, toMonths, this);
		},
		mouseDown: function (event) {
			var target = event.target;
			while (target.parentElement) {
				if (target.classList.contains('lyteCalCdate')) {
					break;
				}
				target = target.parentElement;
			}
			if (target.tagName === "HTML") {
				return;
			}
			var clickCount = this.getData('clickCount');
		 	clickCount++;
		 	this.setData('clickCount',clickCount);
		 	var self = this;
		    if (clickCount === 1) {
		        this.singleClickTimer = setTimeout(function() {
		            clickCount = 0;
		            self.setData('clickCount',clickCount);
		            delete this.singleClickTimer;
		        }, 400);
		    } else if (clickCount === 2) {
		        clearTimeout(this.singleClickTimer);
		        if(this.singleClickTimer){
		        	delete this.singleClickTimer;
		        }
		        clickCount = 0;
		        this.setData('clickCount',clickCount);
		        // var target = event.target;
		        if(target.classList.contains("lyteCalCdate")){
					if(!target.classList.contains("lyteCalDiffMonth")){
						this.checkAndRemoveAllSelectedClasses();
						this.removeMonthEndAndStart();
						this.setData('dateNode1', target);
						this.setData('dateNode2', target);
						target.classList.add('lyteDateRPFirstDateSelected', 'lyteDateRPLastDateSelected');
						var nodes = this.$node.querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
						this.checkForMonthEndAndStart(nodes, Array.from(nodes).indexOf(target), target.dataset.date, target.dataset.date);
						this.setData('selectedDate1', target.dataset.date);
						this.setData('selectedDate2', target.dataset.date);
						this.setData('dateSelected', false);
						this.executeSelected(event);
					}
				}
				return;
			}

			if (target.classList.contains("lyteCalCdate")) {
				if (!target.classList.contains("lyteCalDiffMonth")) {
					if (!this.getData('dateSelected')) {
						// if(this.getMethods('firstSelection')){
						// 	this.executeMethod('firstSelection',event,this);
						// }
						this.checkAndRemoveAllSelectedClasses();
						this.removeMonthEndAndStart();
						this.setData('dateNode1', target);
						target.classList.add("lyteDateRPTempFirstDateSelected");
						target.classList.add("lyteDateRPTempLastDateSelected");
						var nodes = this.$node.querySelectorAll('.lyteCalCdate:not(.lyteCalDiffMonth)');
						this.checkForMonthEndAndStart(nodes, Array.from(nodes).indexOf(target), target.dataset.date, target.dataset.date);
						this.setData('selectedDate1', target.dataset.date);
						this.setData('dateSelected', true);
					}
					else {
						// if(this.getMethods('secondSelection')){
						// 	this.executeMethod('secondSelection',event,this);
						// }
						if (target.classList.contains('lyteDateRPTempSelected')) {
							target.classList.remove('lyteDateRPTempSelected');
						}
						var date1 = Date.parse(this.stringToDate(this.getData('selectedDate1'), this.getData('ltPropFormat')) /*this.getData('selectedDate1')*/);
						var date2 = Date.parse(this.stringToDate(target.dataset.date, this.getData('ltPropFormat')) /*target.dataset.date*/);
						if (date1 <= date2) {
							this.getData('dateNode1').classList.remove('lyteDateRPTempFirstDateSelected');
							this.getData('dateNode1').classList.add('lyteDateRPFirstDateSelected');
							this.getData('dateNode2').classList.remove('lyteDateRPTempLastDateSelected');
							this.getData('dateNode2').classList.add('lyteDateRPLastDateSelected');
						}
						else {
							this.getData('dateNode1').classList.remove('lyteDateRPTempLastDateSelected');
							this.getData('dateNode1').classList.add('lyteDateRPLastDateSelected');
							this.getData('dateNode2').classList.remove('lyteDateRPTempFirstDateSelected');
							this.getData('dateNode2').classList.add('lyteDateRPFirstDateSelected');
						}
						this.setData('selectedDate2', target.dataset.date);
						this.setData('tempDate', "");
						this.setData('dateSelected', false);
						this.executeSelected(event);
					}
				}
			}
		},
		mouseOver: function (event) {
			if (this.getData("dateSelected")) {
				var target = event.target;
				while (target.parentElement) {
					if (target.classList.contains('lyteCalCdate')) {
						break;
					}
					target = target.parentElement;
				}
				if (target.tagName === "HTML") {
					return;
				}
				if (target.classList.contains("lyteCalCdate")) {
					if (!target.classList.contains("lyteCalDiffMonth")) {
						this.setData('dateNode2', target);
						this.selectDates(target.dataset.date);
					}
				}
			}
		},
		separateMouseDown: function (event) {
			var target = event.target;
			while (target.parentElement) {
				if (target.classList.contains('lyteCalCdate')) {
					break;
				}
				target = target.parentElement;
			}
			if (target.tagName === "HTML") {
				return;
			}
			if (target.classList.contains("lyteCalCdate")) {
				if (!target.classList.contains("lyteCalDiffMonth")) {
					var calendar = target.closest('lyte-calendar');
					if (calendar.classList.contains('dRPCalendar1')) {
						this.setData('selectedDate1', target.dataset.date);
						this.setData('ltPropStartDate', target.dataset.date);
						var date1 = this.getData('calViewDate1');
						var date2 = this.getData('calViewDate2');
						if ((date1.getMonth() > date2.getMonth() && date1.getFullYear() == date2.getFullYear()) || (date1.getFullYear() > date2.getFullYear())) {
							var cal2 = this.$node.querySelector('.dRPCalendar2');
							var mm = this.getData('calViewDate1').getMonth(); //January is 0!
							var yy = this.getData('calViewDate1').getFullYear();
							this.setMonthAndYear(cal2, { dd: 1, mm: mm, yy: yy }, "cal2");
							if (this.getData('ltPropEndDate')) {
								this.checkforStartDateAndEndDate(cal2, this.getData('ltPropEndDate'), "end");
							}
						}
					}
					else if (calendar.classList.contains('dRPCalendar2')) {
						this.setData('selectedDate2', target.dataset.date);
						this.setData('ltPropEndDate', target.dataset.date);
						var date1 = this.getData('calViewDate1');
						var date2 = this.getData('calViewDate2');
						if ((date2.getMonth() < date1.getMonth() && date2.getFullYear() == date1.getFullYear()) || (date2.getFullYear() < date1.getFullYear())) {
							var cal1 = this.$node.querySelector('.dRPCalendar1');
							var mm = this.getData('calViewDate2').getMonth(); //January is 0!
							var yy = this.getData('calViewDate2').getFullYear();
							this.setMonthAndYear(cal1, { dd: 1, mm: mm, yy: yy }, "cal1");
							if (this.getData('ltPropStartDate')) {
								this.checkforStartDateAndEndDate(cal1, this.getData('ltPropStartDate'), "start");
							}
						}
					}
					this.validateNavigationAndDropdown();
					if (this.getData('dateNode1') && this.getData('dateNode2')) {
						this.executeSelected(event);
					}
				}
			}
		},
		separatePrevious: function (opt, cal, event) {
			var calendar, fromMonths, toMonths;
			if (cal == 'cal1') {
				calendar = this.$node.querySelector('.dRPCalendar1');
				fromMonths = this.getData('monthNames1')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear();
			}
			else if (cal == 'cal2') {
				calendar = this.$node.querySelector('.dRPCalendar2');
				fromMonths = this.getData('monthNames2')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear();
			}
			if (calendar) {
				calendar.setData('selectDate', false);
				var dd = 1;
				var mm;
				var yy;
				if (opt == 'M') {
					mm = calendar.getData('viewDate').getMonth() - 1;
				}
				else {
					mm = calendar.getData('viewDate').getMonth();
				}
				if (opt == 'Y') {
					yy = calendar.getData('viewDate').getFullYear() - 1;
				}
				else {
					yy = calendar.getData('viewDate').getFullYear();
				}
				if (mm == -1) {
					mm = 11;
					yy -= 1;
				}
				if (yy < this.getData("ltPropStartYear")) {
					return;
				}
				this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, cal);
				if (cal == 'cal1') {
					if (this.getData('ltPropStartDate')) {
						this.checkforStartDateAndEndDate(calendar, this.getData('ltPropStartDate'), "start");
					}
					toMonths = this.getData('monthNames1')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear();
				}
				else if (cal == 'cal2') {
					if (this.getData('ltPropEndDate')) {
						this.checkforStartDateAndEndDate(calendar, this.getData('ltPropEndDate'), "end");
					}
					toMonths = this.getData('monthNames2')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear();
				}
				this.validateNavigationAndDropdown();
				this.callOnNavigate(event, fromMonths, toMonths, this, cal == "cal1" ? "from Calendar" : "to Calendar");
			}
		},
		separateNext: function (opt, cal, event) {
			var calendar, fromMonths, toMonths;
			if (cal == 'cal1') {
				calendar = this.$node.querySelector('.dRPCalendar1');
				fromMonths = this.getData('monthNames1')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear();
			}
			else if (cal == 'cal2') {
				calendar = this.$node.querySelector('.dRPCalendar2');
				fromMonths = this.getData('monthNames2')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear();
			}
			if (calendar) {
				calendar.setData('selectDate', false);
				var dd = 1;
				var mm;
				var yy;
				if (opt == 'M') {
					mm = calendar.getData('viewDate').getMonth() + 1;
				}
				else {
					mm = calendar.getData('viewDate').getMonth();
				}
				if (opt == 'Y') {
					yy = calendar.getData('viewDate').getFullYear() + 1;
				}
				else {
					yy = calendar.getData('viewDate').getFullYear();
				}
				if (mm == 12) {
					mm = 0;
					yy += 1;
				}
				if (yy > this.getData('ltPropEndYear')) {
					return;
				}
				this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, cal);
				if (cal == 'cal1') {
					if (this.getData('ltPropStartDate')) {
						this.checkforStartDateAndEndDate(calendar, this.getData('ltPropStartDate'), "start");
					}
					toMonths = this.getData('monthNames1')[this.getData('calViewDate1').getMonth()] + " " + this.getData('calViewDate1').getFullYear();
				}
				else if (cal == 'cal2') {
					if (this.getData('ltPropEndDate')) {
						this.checkforStartDateAndEndDate(calendar, this.getData('ltPropEndDate'), "end");
					}
					toMonths = this.getData('monthNames2')[this.getData('calViewDate2').getMonth()] + " " + this.getData('calViewDate2').getFullYear();
				}
				this.validateNavigationAndDropdown();
				this.callOnNavigate(event, fromMonths, toMonths, this, cal == "cal1" ? "from Calendar" : "to Calendar");
			}
		}
	},

	start_obs : function( arg ){	
		var cb = 'onStartDateChanged';

		if( this.getMethods( cb ) ){
		   /**
	        * @method onStartDateChanged
	        * @version 3.29.0
	        */
			this.executeMethod( cb, arg, this );
		}

	}.observes( 'selectedDate1' ),

	methods: {
		addDropdownClass: function (ev, comp) {
			var body = comp.childComp;
			body.classList.add('lyteCalendarDropdown');
		},
		editArrowPosition: function (ev, comp) {
			var arrow = comp.childComp.querySelector('.lyteArrow');
			if (_lyteUiUtils.getRTL()) {
				arrow.style.right = "20%";
				arrow.style.left = "auto";
			} else {
				arrow.style.left = "20%";
				arrow.style.right = "auto";
			}
		},
		optionSelected: function (cal, opt, event, selected, comp) {
			if (this.getData('ltPropSelectionType') == "separate") {
				if (cal == "cal1") {
					var calendar = this.$node.querySelector('.dRPCalendar1');
					calendar.setData('selectDate', false);
					var dd = 1;
					var mm;
					var yy;
					if (opt == 'M') {
						mm = this.getData('monthNames').indexOf(selected);
					}
					else {
						mm = calendar.getData('viewDate').getMonth();
					}
					if (opt == 'Y') {
						yy = parseInt(selected);
					}
					else {
						yy = calendar.getData('viewDate').getFullYear();
					}
					if (this.getData('ltPropEndDate')) {
						var date = this.stringToDate(this.getData('ltPropEndDate'), this.getData('ltPropFormat'));
						if (mm > date.getMonth() && yy >= date.getFullYear()) {
							if (opt == 'M') {
								calendar.querySelector('.monthDD').ltProp("selected", this.getData("monthNames")[calendar.getData('viewDate').getMonth()]);
							}
							if (opt == 'Y') {
								calendar.querySelector('.yearDD').ltProp("selected", "" + calendar.getData('viewDate').getFullYear());
							}
							return;
						}
					}
					this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, "cal1");
					if (this.getData('ltPropStartDate')) {
						this.checkforStartDateAndEndDate(calendar, this.getData('ltPropStartDate'), "start");
					}
				}
				else if (cal == "cal2") {
					var calendar = this.$node.querySelector('.dRPCalendar2');
					calendar.setData('selectDate', false);
					var dd = 1;
					var mm;
					var yy;
					if (opt == 'M') {
						mm = this.getData('monthNames').indexOf(selected);
					}
					else {
						mm = calendar.getData('viewDate').getMonth();
					}
					if (opt == 'Y') {
						yy = selected;
					}
					else {
						yy = calendar.getData('viewDate').getFullYear();
					}
					if (this.getData('ltPropStartDate')) {
						var date = this.stringToDate(this.getData('ltPropStartDate'), this.getData('ltPropFormat'));
						if (mm < date.getMonth() && yy <= date.getFullYear()) {
							if (opt == 'M') {
								calendar.querySelector('.monthDD').ltProp("selected", this.getData("monthNames")[calendar.getData('viewDate').getMonth()]);
							}
							if (opt == 'Y') {
								calendar.querySelector('.yearDD').ltProp("selected", "" + calendar.getData('viewDate').getFullYear());
							}
							return;
						}
					}
					this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, "cal2");
					if (this.getData('ltPropEndDate')) {
						this.checkforStartDateAndEndDate(calendar, this.getData('ltPropEndDate'), "end");
					}
				}
				this.validateNavigationAndDropdown();
			}
			// if(this.getMethods('ddOptionSelected')){
			// 	this.executeMethod('ddOptionSelected',event,selected,comp,cal,opt,this);
			// }
			if (this.getData('ltPropSelectionType') == "continuous") {
				if (cal == "cal1") {
					var calendar = this.$node.querySelector('.dRPCalendar1');
					calendar.setData('selectDate', false);
					var dd = 1;
					var mm;
					var yy;
					if (opt == 'M') {
						mm = this.getData('monthNames').indexOf(selected);
					}
					else {
						mm = calendar.getData('viewDate').getMonth();
					}
					if (opt == 'Y') {
						yy = parseInt(selected);
					}
					else {
						yy = calendar.getData('viewDate').getFullYear();
					}
					if (mm > 10 && yy == this.getData('ltPropEndYear')) {
						if (selected == _lyteUiUtils.i18n('Dec') || selected == _lyteUiUtils.i18n('December')) {
							calendar.querySelector('.monthDD').ltProp("selected", this.getData("monthNames")[calendar.getData('viewDate').getMonth()]);
						}
						else {
							calendar.querySelector('.yearDD').ltProp("selected", "" + calendar.getData('viewDate').getFullYear());
						}
						// console.log("returning "+mm+" "+yy);
						return;
					}
					this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, "cal1");
					if (mm < 11) {
						mm += 1;
					}
					else {
						mm = 0;
						yy += 1;
					}
					this.setMonthAndYear(this.$node.querySelector('.dRPCalendar2'), { dd: dd, mm: mm, yy: yy }, "cal2");
				}
				else if (cal == "cal2") {
					var calendar = this.$node.querySelector('.dRPCalendar2');
					calendar.setData('selectDate', false);
					var dd = 1;
					var mm;
					var yy;
					if (opt == 'M') {
						mm = this.getData('monthNames').indexOf(selected);
					}
					else {
						mm = calendar.getData('viewDate').getMonth();
					}
					if (opt == 'Y') {
						yy = selected;
					}
					else {
						yy = calendar.getData('viewDate').getFullYear();
					}
					if (mm < 1 && yy == this.getData('ltPropStartYear')) {
						if (selected == _lyteUiUtils.i18n('Jan') || selected == _lyteUiUtils.i18n('January')) {
							calendar.querySelector('.monthDD').ltProp("selected", this.getData("monthNames")[calendar.getData('viewDate').getMonth()]);
						}
						else {
							calendar.querySelector('.yearDD').ltProp("selected", "" + calendar.getData('viewDate').getFullYear());
						}
						// console.log("returning "+mm+" "+yy);
						return;
					}
					this.setMonthAndYear(calendar, { dd: dd, mm: mm, yy: yy }, "cal2");
					if (mm > 0) {
						mm -= 1;
					}
					else {
						mm = 11;
						yy -= 1;
					}
					this.$node.querySelector('.dRPCalendar1').setData('selectDate', false);
					this.setMonthAndYear(this.$node.querySelector('.dRPCalendar1'), { dd: dd, mm: mm, yy: yy }, "cal1");
				}
				this.checkForSelectedDates();
				this.validateNavigation();
			}
			this.setTodayClass();
		},
		viewDateChange : function(cal,comp,viewDate){
			this.setCalendarHeader(cal,comp,viewDate);
		}
	}
});

/**
 * @syntax nonYielded
 * <lyte-daterangepicker>
 * </lyte-daterangepicker>
 */
