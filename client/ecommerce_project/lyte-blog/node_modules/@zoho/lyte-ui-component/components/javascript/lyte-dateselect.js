/**
 * This component is used to select a date or a range of date from the given options
 * @component lyte-dateselect
 * @version 1.0.5
 * @dependency lyte-dropdown
 *  /components/lyte-dropdown.js
 *  /theme/compiledCSS/default/ltr/lyte-ui-dropdown.css
 * @dependency lyte-calendar
 *  /components/lyte-calendar.js
 *  /theme/compiledCSS/default/ltr/lyte-ui-calendar.css
 * @dependency lyte-daterangepicker
 *  /components/lyte-daterangepicker.js
 *  /theme/compiledCSS/default/ltr/lyte-ui-daterangepicker.css
 * @methods beforeRender,afterRender,onBeforeShow,onShow,onBeforeHide,onHide,onSelect
 * @import lyte-dropdown
 * @ignoreMethods
 * @ignoreProperties
 * @ignoreUtilities
 */

Lyte.Component.register("lyte-dateselect", {
	init : function(){
		this.getMethods( 'beforeRender' ) && this.executeMethod( 'beforeRender', this.$node )
		this.$node.toggle = function(){
			this._drop.toggle();
		}.bind( this )
	},
	data : function(){
		return {
			// data for date range picker and calendar
		   /**
			* @experimental shortMonthNames
			*/
			shortMonthNames : Lyte.attr( "array" , { "default" : [ 'Jan', 'Feb', 'Mar', 'Apr', 'short.may', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ]}),
		   /**
			* @experimental longMonthNames
			*/
			longMonthNames : Lyte.attr( 'array', { 
				'default': [
				'January',
				'February',
				'March',
				'April',
				'May',
				'June',
				'July',
				'August',
				'September',
				'October',
				'November',
				'December' 
				]
			} ),
		   /**
			* @componentProperty {object} ltPropStartDateObject
			* @version 1.0.5
			*/			
			ltPropStartDateObject : Lyte.attr( "object" ),
		   /**
			* @componentProperty {object} ltPropEndDateObject
			* @version 1.0.5
			*/
			ltPropEndDateObject : Lyte.attr("object"),
		   /**
			* @componentProperty {dateString} ltPropStartDate=''
			* @version 1.0.5
			*/
			ltPropStartDate : Lyte.attr( "string", { "default" : "" } ),
		   /**
			* @componentProperty {dateString} ltPropEndDate=''
			* @version 1.0.5
			*/
			ltPropEndDate : Lyte.attr( "string", { "default" : "" } ),
		   /**
			* @componentProperty {dateString} ltPropCurrentDate=''
			* @version 1.0.5
			*/
			ltPropCurrentDate : Lyte.attr( "string", { "default" : "" } ),
		   /**
			* @componentProperty {boolean} ltPropCalendarYield=false
			* @version 1.0.5
			*/
			ltPropCalendarYield : Lyte.attr( 'boolean', { default : false } ),
		   /**
			* @componentProperty {object} ltPropCalendar={"headerType":"dropdown","fillRows":false}
			* @version 1.0.5
			* @component lyte-calendar
			*/
			ltPropCalendar : Lyte.attr( 'object', { default : { headerType : "dropdown", fillRows : false } } ),
		   /**
			* @componentProperty {object} ltPropDateRangePicker={"monthHeaderFormat":"MMMM YYYY"}
			* @version 1.0.5
			* @component lyte-daterangepicker
			*/
			ltPropDateRangePicker : Lyte.attr( 'object', { default : { monthHeaderFormat : "MMMM YYYY" } } ),
		   /**
			* @componentProperty {boolean} ltPropItemYield=false
			* @version 1.0.5
			*/
			ltPropItemYield : Lyte.attr( 'boolean', { default : false } ),

			// dateselect props
		   /**
			* @componentProperty {string} ltPropSelected=today
			* @version 1.0.5
			*/
			ltPropSelected : Lyte.attr('string', { default : 'today'}),
		   /**
		    * @typedef {object} dateSelectOptions
		    * @property {boolean} today=true
		    * @property {boolean} yesterday=true
		    * @property {boolean} last7days=true
		    * @property {boolean} last30days=true
		    * @property {boolean} thisWeek=true
		    * @property {boolean} thisMonth=true
		    * @property {boolean} specificDate=true
		    * @property {boolean} customRange=true
		    */
		   /**
			* @componentProperty {dateSelectOptions} ltPropOptions
			* @version 1.0.5
			*/
			ltPropOptions : Lyte.attr( 'object', { default : {
				today :  true,
				yesterday : true,
				last7days : true,
				last30days : true,
				thisWeek : true,
				thisMonth : true,
				specificDate : true,
				customRange : true
			}}),
		   /**
			* @componentProperty {string} ltPropDropdownWrapperClass=''
			* @version 1.0.5
			*/
			ltPropDropdownWrapperClass : Lyte.attr( 'string', { default : '' } ),
		   /**
			* @componentProperty {object} ltPropDropdown
			* @version 1.0.5
			* @default {}
			* @component lyte-dropdown
			*/
			ltPropDropdown : Lyte.attr( 'object', { default : {} } ),
		   /**
			* @componentProperty {string} ltPropDisplayValue=''
			* @version 1.0.5
			*/
			ltPropDisplayValue : Lyte.attr( 'string', { default : '' } ),
		   /**
			* @componentProperty {boolean} ltPropButtonYield=false
			* @version 1.0.5
			*/
			ltPropButtonYield : Lyte.attr( 'boolean', { default : false } ),
		   /**
			* @componentProperty {string} ltPropCalendarWrapperClass=''
			* @version 1.0.5
			*/
			ltPropCalendarWrapperClass : Lyte.attr( 'string', { default : '' } ),
		   /**
			* @componentProperty {boolean} ltPropFooterYield=false
			* @version 3.10.0
			*/			
			ltPropFooterYield : Lyte.attr( 'boolean', { default : false } ),
		   /**
			* @componentProperty {boolean} ltPropI18n=false
			* @version 3.10.0
			*/
			ltPropI18n : Lyte.attr( 'boolean', { default : false } ),
			/**
			* @componentProperty {boolean} ltPropI18n=false
			* @version 3.14.0
			*/
			ltPropAnimation : Lyte.attr( 'object', { default : {
				dropdown : "Fade", // Scale, Slide
				calendar : "Fade"
			} } ),

			// system data

		   /**
			* @experimental pos
			*/
			pos : Lyte.attr( 'string', { default : '' } ),
		   /**
			* @experimental prevSel
			*/
			prevSel : Lyte.attr( 'string', { default : '' } ),
		   /**
			* @experimental opend
			*/
			opend : Lyte.attr( 'boolean',  { default : false } )

		}		
	},

	selectValue : function( dat ){
		if( !this.data.ltPropButtonYield ){
			// var val = this.data.ltPropOptions[ dat ];
			// var oriDisp = val.constructor == Boolean ? _lyteUiUtils.i18n( dat ) : val;
			this.setData( 'ltPropDisplayValue', this.getVal( dat ) )
		}
	},

	didConnect : function(){
		this._drop = this.$node.querySelector( 'lyte-dropdown' );
		this._drop.parent = this.$node;
		var com = this._drop.component;
		this._cmp = com.childComp ? com.childComp : this._drop.querySelector( 'lyte-drop-box' )
		this._end = this.tranEnd.bind( this );
		this._indend = this.tranEnd1.bind( this );

		this._opentrans = this.opentrans.bind( this );

		this._caldiv = this.$node.querySelector( '.dateSelectcal' ) 
		_lyteUiUtils.appendChild( document.body, this._caldiv )
		if( !this.data.ltPropButtonYield ){
			this.setData( 'ltPropDisplayValue', this.getVal( this.data.ltPropSelected ) )
		}
		if( !document._dateselectResize ){
			document._dateselectResize = true;
			window.addEventListener( 'resize', dtslctscroll );
			window.addEventListener( 'scroll', dtslctscroll );
			window.addEventListener( 'orientationchange', dtslctscroll );
		}
		this.$node.toggle = function( ev, tp ){
			this._drop.toggle( ev, tp )
		}.bind( this )
		this.getMethods( 'afterRender' ) && this.executeMethod( 'afterRender', this.$node );
		$L.fastdom.measure( function(){
			this._dir = _lyteUiUtils.getRTL();
			if( this._dir ) {
				$L.fastdom.mutate( function(){
						this._caldiv.classList.add( 'lyteRTL' )
				}.bind( this ) )
			}
		}.bind( this ) )
	},

	didDestroy : function(){
		document.body.removeChild( this._caldiv );
		if( document._dateselectResize && document.querySelectorAll( 'lyte-dateselect' ).length == 0 ){
			delete document._dateselectResize;
			window.removeEventListener( 'resize', dtslctscroll );
			window.removeEventListener( 'scroll', dtslctscroll );
			window.removeEventListener( 'orientationchange', dtslctscroll );
		}
		delete this._caldiv; delete this._cmp; delete this._drop; delete this.$node.toggle;
	},

	getVal : function( sel ){
		if( !sel ){
			return "";
		}
		var val = this.data.ltPropOptions[ sel ], oridisp = val.constructor == Boolean ? _lyteUiUtils.i18n( sel ) :  val ;
 		if( [ 'specificDate', 'customRange' ].indexOf( sel ) == -1 ){
			return oridisp;
		} else if( sel == 'specificDate' ){
			return this.i18_date( this.data.ltPropCurrentDate, this.data.ltPropCalendar.format || "MM/DD/YYYY" ) || oridisp;
		} else if( sel == 'customRange' ) {
			var format = this.data.ltPropDateRangePicker.format || "MM/DD/YYYY",
			s = this.i18_date( this.data.ltPropStartDate, format ), e = this.i18_date( this.data.ltPropEndDate, format );
			return ( s && e ) ? ( s + ' - ' + e ): oridisp;
		} 
		// return _lyteUiUtils.i18n( s );
	},

	resolveConflicts: function( format ) {
		var match = /(\bd\b|\bdd\b|\bddd\b|\bdddd\b)/.exec( format ),
		index = ( match || {} ).index,
		matchLength = ( match || [] )[ 0 ].length || 0;

		if( !isNaN( index ) ) {
			return format.substring( 0, index + matchLength ) + ( format.substring( index + matchLength ) || '' ).toUpperCase();
		}

		return format.toUpperCase();
	},

	isConflictingFormat: function( format ) {
		var rdate = /(\bd\b|\bdd\b|\bddd\b|\bdddd\b)/ig,
		match = format.match( rdate ) || [];

		return match.length > 1;
	},

	getRelevantFormat: function( format ) {

		if( this.isConflictingFormat( format ) ) {
			return this.resolveConflicts( format );
		}

		return format.toUpperCase();
	},

	i18_date : function( date, format ){

		format = this.getRelevantFormat( format );

		if( date && $L.moment && this.data.ltPropI18n ){
			var cb = function( value, converted, format ){
				if( this.getMethods( 'onI18n' ) ){
					return this.executeMethod( 'onI18n', value, converted, format );
				}
				return converted;
			}.bind( this );
			return $L.moment( date, format ).i18N( format, cb );
		}
		return date;
	},

	selectedObs : function( arg ){
		if( arg.newValue && this._cmp && !this._cmp.classList.contains( 'lyteDropdownHidden' ) ) {
			 var oldAn = [ 'specificDate', 'customRange' ].indexOf( arg.oldValue ) != -1 ? this._caldiv.querySelector( '.' + arg.oldValue ) : null,
			 newAn = [ 'specificDate', 'customRange' ].indexOf( arg.newValue ) != -1 ? this._caldiv.querySelector( '.' + arg.newValue ) : null;
			 if( newAn ) {
			 	if( oldAn ) {
			 		var prm = new Promise( function( res, rej ){
			 			this._new = res;
			 			this.hideele( oldAn );
			 		}.bind( this ) );
			 		Promise.resolve( prm ).then( function(){
			 			$L.fastdom.mutate( this.openele.bind( this ) );
			 		}.bind( this ))
			 	} else{
			 		this.openele()
			 	}
			 	this.data.prevSel = this.data.prevSel || arg.oldValue
			 }
		} else if( arg.newValue && ( ( this._cmp && this._cmp.classList.contains( 'lyteDropdownHidden' ) ) || [ 'specificDate', 'customRange' ].indexOf( arg.newValue ) != -1 ) ){
			this.selectValue( arg.newValue );
		}
		// this.resetValue();
	}.observes( 'ltPropSelected' ), 

	opentrans : function( evt ){
		$L( this._cmp ).removeClass( 'lyteDateselectAnimationHappening' );
		this._cmp.removeEventListener( 'transitionend', this._opentrans, true );
		delete this._drop.component._preventSetcss;


		if( this.getMethods( 'onAnimationEnd' ) ){
			this.executeMethod( 'onAnimationEnd', this.$node );
		}

	},

	tranEnd : function( evt ){
		if( this._cmp ){
			this._cmp.removeEventListener( 'transitionend', this._end, true );
			$L( this._cmp ).removeClass( 'lyteDateselectAnimationHappening' ).css( this.getValue( 1, 'dropdown', this._cmp ) );
		}

		if( this._el ){
			this._el.classList.add( 'lyteDropdownHidden' );
			delete this._el;
		}
		if( this._res ){
			this._res( true );
			this._caldiv.classList.add( 'lyteDropdownHidden' );
			this.callRevert();
			delete this._res;
		}
		this.hidedropdown();
	},

	tranEnd1 : function( evt ){
		if( this._el ){
			this._el.removeEventListener( 'transitionend', this._indend, true );
			$L( this._el ).removeClass( 'lyteDateselectAnimationHappening' );
			this._el.classList.add( 'lyteDropdownHidden' );
			delete this._el;
		}
		if( this._new ){
			this._new( true );
			delete this._new;
		}

		this.hidedropdown();
	},

	hidedropdown : function(){
		var dropdown = Array.from( this._caldiv.querySelectorAll( 'lyte-dropdown' ) );

		dropdown.forEach( function( item ){
			item.close();
		});
	},

	hideele : function( elem ){
		elem.addEventListener( 'transitionend', this._indend, true );
		$L( elem ).addClass( 'lyteDateselectAnimationHappening' );

		this._el = elem;
		
		if( this.data.ltPropAnimation.dropdown ){
			$L( elem ).css( this.getValue( 0, 'calendar', elem ) );
		} else{
			this._indend();
		}
	},

	getValue : function( value, type, elem ){
		var animation = this.data.ltPropAnimation[ type ];

		if( animation == 'Fade' ){
			return {
				opacity : value
			}
		} else if( animation == 'Scale' ){
			return{
				transform : "scaleY(" + value + ')'
			}
		} else if(  animation == 'Slide' ){
			var obj = {
				height : value ? ( elem.__height ) : 0,
				transform : ""
			};

			if( $L( this._caldiv ).hasClass( 'lyteDateselectUp' ) ){
				// obj.transform = 'translateY(' + ( !value ? elem.__height : 0 ) + 'px)';

				obj.transform = value ? '' : ( 'translateY(' + elem.__height + 'px)' );
			}

			return obj;
		}
		return {};
	},

	openele : function(){
		var sel = this.data.ltPropSelected;
		if( [ 'specificDate', 'customRange' ].indexOf( sel ) != -1 ) {
			this._caldiv.classList.remove( 'lyteDropdownHidden' );
			var el = this._caldiv.querySelector( '.' + sel );
			el.classList.remove( 'lyteDropdownHidden' );
			if( this.data.ltPropAnimation.calendar == 'Slide' ){
				$L.fastdom.measure( function(){
					el.__height = this._caldiv.__height = el.children[ 0 ].getBoundingClientRect().height;
					$L.fastdom.mutate( function(){
						$L( el ).css( 'transitionDuration', '0s' ).css( this.getValue( 0, 'calendar', el ) );
						// $L.fastdom.measure( this.setCss.bind( this ) );
						setTimeout( function(){
							$L( el ).css( 'transitionDuration', '' );
							this.setCss();
						}.bind( this ), 20 );
					}.bind( this ) );
				}.bind( this ));
			} else {
				$L( el ).css( this.getValue( 0, 'calendar', el ) );
				$L.fastdom.measure( this.setCss.bind( this ) );
			}
		}
	},

	animation_obs : function(){
		var animation = this.data.ltPropAnimation;
		
		$L( this._caldiv )
		.removeClass( 'lyteDateselectAnimate' )
		.addClass( animation.calendar != 'Fade' ? 'lyteDateselectAnimate' : '' )
		.css( {
			transform : "",
			opacity : ""
		} );

		$L( this._cmp )
		.removeClass( 'lyteDateselectAnimate' )
		.addClass( animation.dropdown != 'Fade' ? 'lyteDateselectAnimate' : '' )
		.css( {
			transform : "",
			opacity : ""
		} );

	}.observes( 'ltPropAnimation.{}, ltPropAnimation' ).on( 'didConnect' ),

	methods : {

		rangenavigate : function(){
			if( this.data.ltPropAnimation.calendar == 'Slide' ){
				var datepicker = arguments[ 3 ].$node;
				$L.fastdom.measure( function(){
					var height = datepicker.getBoundingClientRect().height;
					$L.fastdom.mutate( function(){
						$L( datepicker.parentNode ).css( 'height', height );
					});
				});
			}
		},

		bfSw : function( arg1, arg2 ){
			var ret;
			if( this.getMethods( 'onBeforeShow' ) ){
				ret = this.executeMethod( 'onBeforeShow', arg1, arg2 )
			}
			if( !this.data.opend && ret != false ) {
				this.setData( 'opend', true );
				return new Promise( function( res ){
					window.requestAnimationFrame( res );
				})
			}
			return ret;
		},
		sw : function( arg1, arg2 ){

			this._drop.component._preventSetcss = !this._drop.ltProp( 'freeze' );

			this.getMethods( 'onShow' ) && this.executeMethod( 'onShow', arg1, arg2 );

			var body = arg2.childComp;
			
			$L( body ).addClass( 'lyteDateselectAnimationHappening' ).css( 'transitionDuration', '0s' ).css( this.getValue( 0, 'dropdown', body ) );
			
			setTimeout( function(){ // request animation frame causes issue in ff
				$L( body ).css( 'transitionDuration', '' );
				this.openele();

				body.addEventListener( 'transitionend', this._opentrans, true );

				$L.fastdom.mutate( function(){
					$L( body ).css( this.getValue( 1, 'dropdown', body ) );
				}.bind( this ) ); 
			}.bind( this ), 20 );
		},
	
		bfHde : function( arg1, arg2 ){
			if( this._prevent || this._caldiv.contains( ( arg1 || {} ).target ) ){
				delete this._prevent;
				return false;
			}
			var ret;
			if( this.getMethods( 'onBeforeHide' ) ){
				ret = this.executeMethod( 'onBeforeHide', arg1, arg2 )
			}
			if( ret != false ){
				return new Promise( function( res, rej ){
					this._res = res;
					var animation = this.data.ltPropAnimation || {},
					el = this._caldiv.querySelector('.specificDate:not(.lyteDropdownHidden),.customRange:not(.lyteDropdownHidden)');

					this._el = el;

					if( animation.dropdown ){
						arg2.childComp.addEventListener( 'transitionend', this._end, true );
						$L( arg2.childComp ).addClass( 'lyteDateselectAnimationHappening' );
						if( el ) {
							$L( el ).css( this.getValue( 0, 'calendar', el ) );
						}
						$L( arg2.childComp ).css( this.getValue( 0, 'dropdown', arg2.childComp ) );
					} else{
						this._end();
					}
				}.bind( this ) )
			}
			return ret;
		},
		
		hde : function( arg1, arg ){
			if( !this._rest && this.data.prevSel ){
				this.setData( 'ltPropSelected', this.data.prevSel );
				if( !this.data.ltPropButtonYield ){
					this.setData( 'ltPropDisplayValue', this.getVal( this.data.ltPropSelected ) );
				}
			}
			delete this._rest;
			this.data.prevSel = ''; 
			this.resetValue();
			if( this.data.ltPropAnimation.dropdown == 'Slide' ){
				$L( this._cmp ).css( 'height', '' );
			}
			if( this.getMethods( 'onHide' ) ){
				return this.executeMethod( 'onHide', arg1, arg )
			}
		},
		dateselected : function( event ){
			this.selected( event, true )
		},

		dateselected1 : function( event ){
			this.selected( event )
		},
		optSel : function( evt, dat, com, itm ){
			if( [ 'specificDate', 'customRange' ].indexOf( dat ) != -1 ){
				this._prevent = true;
				return
			}
			this.selectValue( dat );
			this.getMethods('onSelect') && this.executeMethod( 'onSelect', evt, this.$node, dat, itm );
			this._rest = true;
		},
		posChange : function( pos ){
			var addClass = 'removeClass'
			if( /up/i.test( pos ) ){
				addClass = 'addClass';
			}
			$L( this._cmp )[ addClass ]( 'lyteDateselectUp' );
			$L( this._caldiv )[ addClass ]( 'lyteDateselectUp' );
		},

		startChange : function( arg ){
			var cb = 'onStartDateChanged';

			if( this.getMethods( cb ) ){
				this.executeMethod( cb, arg );
			}
		}
	},

	resetValue : function(){
		if( this.data.ltPropSelected != 'specificDate' ) {
			this.setData( 'ltPropCurrentDate', '' );
		}
		if( this.data.ltPropSelected != 'customRange' ){
			this.setData( 'ltPropStartDate', '' );
			this.setData( 'ltPropEndDate', '' );
		}
	},

	callRevert : function(){
		var selected = this.data.ltPropSelected,
		calendar = this._caldiv.querySelector( '.specificDate lyte-calendar' ),
		daterange = this._caldiv.querySelector( '.customRange lyte-daterangepicker' );

		if( selected == 'customRange' ){
			daterange.revertToSelected();
			if( calendar ){
				calendar.revertToToday();
			}
		} else {
			if( selected == 'specificDate' ){
				calendar.revertToSelected();
			} else {
				if( calendar ){
					calendar.revertToToday();
				}
			}
			if( daterange ){
				daterange.revertToToday();
			}
		}
	},

	setCss : function( obj ) {
		function rtlfunc( lft, bcr, ww ){
			if( this._dir ) {
				if( bcr ) {
					if( lft == 'right' ) {
						return ww - bcr.left;
					}
					return ww - bcr.right;
				} else if( lft == 'left' ) {
					return 'right';
				} 
			}
			return bcr ? bcr[ lft ] : 'left';
		}
		var y = window.pageYOffset || document.documentElement.scrollTop,
		body = this._caldiv, par = this._cmp,
		bbcr = body.getBoundingClientRect(),
		bcr = { left : bbcr.left, right : bbcr.right, width : bbcr.width, height : body.__height || bbcr.height }, 
		__bcr = par.getBoundingClientRect(),
		parcr = { left : __bcr.left, right : __bcr.right, width : __bcr.width, height : par.__height, top : parseFloat( par.style.top ) - y, bottom : parseFloat( par.style.top ) - y + par.__height },
		wwidth = window.innerWidth,
		x = ( window.pageXOffset || document.documentElement.scrollLeft ) * ( this._dir ? - 1: 1 ),
		selEl = par.querySelector( 'lyte-drop-item[selected = "true"]' ),
		__selBcr = selEl.getBoundingClientRect(),
		selBcr = { bottom : __selBcr.bottom - ( __bcr.top - parcr.top ) },
		arrow = selEl.querySelector( '.dateArrow' ),
		arbcr = arrow ? arrow.getBoundingClientRect() : { width : 0 },

		newLeft = rtlfunc.call( this, 'left', parcr, wwidth ) + parcr.width + arbcr.width / 2 + x,
		rgtLft = rtlfunc.call( this, 'left', parcr, wwidth ) - arbcr.width / 2 - bcr.width + x,
		newTop = par.style.top,
		pos;

		if( parseFloat( newTop ) + bcr.height < selBcr.bottom + y ){
			newTop = ( y + selBcr.bottom - bcr.height ) + 'px';
		}
		if( newLeft + bcr.width < wwidth + x ) {
			pos = 'right';
		} else {
			if( rgtLft > x ){
				newLeft = rgtLft;
				pos = 'left';
			} else {
				if( wwidth - rtlfunc.call( this, 'right', parcr, wwidth ) > rtlfunc.call( this, 'left', parcr, wwidth ) ){
					pos = 'right'
				} else {
					newLeft = rgtLft;
					pos = 'left'
				}
			}
		}
		$L.fastdom.mutate( function(){
			body.style[ rtlfunc.call( this, 'left' ) ] = newLeft + 'px';
			body.style.top = newTop;
			var elem = this._caldiv.getElementsByClassName( this.data.ltPropSelected )[ 0 ];
			if( elem ){
				$L( elem ).css( this.getValue( 1, 'calendar', elem ) );
			}
			this.setData( 'pos', pos )
		}.bind( this ))
	},

	selected : function( evt, flag ){
		if( !this.data.ltPropButtonYield ){
			this.setData( 'ltPropDisplayValue', this.getVal( this.data.ltPropSelected ) );
		}
		if( this.getMethods('onSelect') ){
			if( flag ){
				this.executeMethod( 'onSelect', evt, this.$node, 'customRange', this.data.ltPropStartDate, this.data.ltPropEndDate )
			} else{
				this.executeMethod( 'onSelect', evt, this.$node, 'specificDate', this.data.ltPropCurrentDate )
			}
		}
		this._rest = true
		this._drop.toggle()
	}

});

function dtslctscroll( evt ){
	if( evt && evt.type == 'resize' && _lyteUiUtils.isMobile ) {
		return;
	}
	var drops = document.querySelectorAll( 'lyte-drop-box:not(.lyteDropdownHidden)' )
	for( var i = 0; i < drops.length; i++ ){
		var opendrop = drops[ i ];
		if( opendrop && opendrop.origindd && opendrop.origindd.parent ){
			var cmp = opendrop.origindd.parent.component;
			evt.type == "orientationchange" ?  setTimeout( cmp.setCss.bind( cmp ), 500 ) : cmp.setCss.call( cmp );
		}
	}
}

/**
 * @syntax nonYielded
 * <lyte-dateselect></lyte-dateselect>
 */

/**
 * @syntax 
 * @attribute ltPropButtonYield=true
 * <lyte-dateselect lt-prop-button-yield = true>
 * 	<template is = "registerYield" yield-name = "buttonYield">
 * 		Drop button name
 * 	</template>
 * </lyte-dateselect>
 */

/**
 * @syntax 
 * @attribute ltPropItemYield=true
 * <lyte-dateselect lt-prop-item-yield = true>
 * 	<template is = "registerYield" yield-name = "item">
 * 		Item yield {{itemValue}}
 * 	</template>
 * </lyte-dateselect>
 */

/**
 * @syntax 
 * @attribute ltPropCalendarYield=true
 * <lyte-dateselect lt-prop-calendar-yield = true>
 * 	<template is = "registerYield" yield-name = "footer">
 * 		calendar footer yield
 * 	</template>
 * </lyte-dateselect>
 */

/**
 * @syntax
 * @attribute ltPropCalendarYield=true
 * @attribute ltPropItemYield=true
 * <lyte-dateselect lt-prop-calendar-yield = true lt-prop-item-yield = true>
 * 	<template is = "registerYield" yield-name = "footer">
 * 		calendar footer yield
 * 	</template>
 * 	<template is = "registerYield" yield-name = "item">
 * 		Item yield {{itemValue}}
 * 	</template>
 * </lyte-dateselect>
 */

/**
 * @syntax
 * @attribute ltPropCalendarYield=true
 * @attribute ltPropButtonYield=true
 * <lyte-dateselect lt-prop-calendar-yield = true lt-prop-button-yield = true>
 * 	<template is = "registerYield" yield-name = "footer">
 * 		calendar footer yield
 * 	</template>
 * 	<template is = "registerYield" yield-name = "buttonYield">
 * 		Drop button name
 * 	</template>
 * </lyte-dateselect>
 */

/**
 * @syntax
 * @attribute ltPropCalendarYield=true
 * @attribute ltPropButtonYield=true
 * @attribute ltPropItemYield=true
 * <lyte-dateselect lt-prop-calendar-yield = true lt-prop-item-yield = true lt-prop-button-yield = true>
 * 	<template is = "registerYield" yield-name = "footer">
 * 		calendar footer yield
 * 	</template>
 * 	<template is = "registerYield" yield-name = "buttonYield">
 * 		Drop button name
 * 	</template>
 * 	<template is = "registerYield" yield-name = "item">
 * 		Item yield {{itemValue}}
 * 	</template>
 * </lyte-dateselect>
 */
