Lyte.Component.register("lyte-layout", {
	data : function(){
		return {
			
			'ltPropDivision' : Lyte.attr('array',{'default' : [] }),
			'ltPropSize' : Lyte.attr('string',{'default':'small'}),
			'ltPropContainerClass' : Lyte.attr('object',{'default':{'small':'lyte-container-sm','medium':'lyte-container-md','large':'lyte-container-lg','xlarge':'lyte-container-xl','fluid':'lyte-container-fluid'}})		
		}		
	},
	init : function(){
		
		this.$node.style.display = 'block';
		

	},
	onChangeSize: function(){
		var size =  this.getData('ltPropSize');
		this.removesizeclass();
		if(size === "fluid"){
			this.$node.classList.add('lyte-container-fluid');
		}else if(size === 'medium'){
			this.$node.classList.add('lyte-container-md');
		}else if(size === 'large'){
			this.$node.classList.add('lyte-container-lg');
		}else if(size === 'xlarge'){
			this.$node.classList.add('lyte-container-xl');
		}else if(size === 'small'){
			this.$node.classList.add('lyte-container-sm');
		}else{
			this.$node.classList.add('lyte-container');
			this.setData('ltPropSize','default');
		}
	}.observes('ltPropSize').on('init'),
	removesizeclass : function(){
		var sizeclass = this.$node.className;
		var regex =  /lyte-container-(lg|md|fuild|md|xl|sm)/i;
		var size = sizeclass.match(regex) || [];
		switch(size[size.length-1]){
			case 'fuild':
				this.$node.classList.remove('lyte-container-fluid');
				break;
			case 'lg':
				this.$node.classList.remove('lyte-container-lg');
				break;
			case 'md':
				this.$node.classList.remove('lyte-container-md');
				break;
			case 'sm':
				this.$node.classList.remove('lyte-container-sm');
				break;
			case 'xl':
				this.$node.classList.remove('lyte-container-xl');
				break;
			default:
				this.$node.classList.remove('lyte-container');
		}
	}
	
});


